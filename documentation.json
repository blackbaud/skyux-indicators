{
    "pipes": [
        {
            "name": "SkyIconClassListPipe",
            "id": "pipe-SkyIconClassListPipe-78909e418f2833c9787f25b7c5f7ce925c10cc14fc766a4eaf3033937ad83f0c8b9e358577f7f041ef7a179f22a277666b2292436b38bd023894a5e91c134492",
            "file": "projects/indicators/src/modules/icon/icon-class-list.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "iconType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "fixedWidth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "variant",
                            "type": "SkyIconVariantType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "iconType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fixedWidth",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variant",
                            "type": "SkyIconVariantType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "skyIconClassList",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\nimport { SkyIconResolverService } from './icon-resolver.service';\n\nimport { SkyIconVariantType } from './types/icon-variant-type';\n\n/**\n * @internal\n */\n@Pipe({\n  name: 'skyIconClassList',\n})\nexport class SkyIconClassListPipe implements PipeTransform {\n  constructor(private resolver: SkyIconResolverService) {}\n\n  public transform(\n    icon: string,\n    iconType?: string,\n    size?: string,\n    fixedWidth?: boolean,\n    variant?: SkyIconVariantType\n  ): string[] {\n    let classList: string[];\n\n    if (iconType === 'skyux') {\n      const resolvedIcon = this.resolver.resolveIcon(icon, variant);\n      classList = ['sky-i-' + resolvedIcon];\n    } else {\n      classList = ['fa', 'fa-' + icon];\n    }\n\n    if (size) {\n      classList.push('fa-' + size);\n    }\n\n    if (fixedWidth) {\n      classList.push('fa-fw');\n    }\n\n    return classList;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "SkyIconStackItem",
            "id": "interface-SkyIconStackItem-5443fddd95f4ab0dbaccaa9ca18d2bf0f7097775fe2793a5fa4cab27ef0d2891c8457c07936f5e93bb35085788d4ab83f70a081ab566c08a125c970e222078db",
            "file": "projects/indicators/src/modules/icon/icon-stack-item.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SkyIconType } from './types/icon-type';\n\nexport interface SkyIconStackItem {\n  /**\n   * Specifies the name of\n   * [the Font Awesome 4.7 icon](https://fontawesome.com/v4.7/icons/) to\n   * display. Do not specify the `fa fa-` classes.\n   * @required\n   */\n  icon: string;\n\n  /**\n   * Specifies the type of icon to display. Specifying `fa` will display a Font Awesome icon,\n   * while specifying `skyux` will display an icon from the custom SKY UX icon font. Note that\n   * the custom SKY UX icon font is currently in beta.\n   */\n  iconType?: SkyIconType;\n}\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Specifies the name of\n<a href=\"https://fontawesome.com/v4.7/icons/\">the Font Awesome 4.7 icon</a> to\ndisplay. Do not specify the <code>fa fa-</code> classes.</p>\n",
                    "line": 10,
                    "rawdescription": "\n\nSpecifies the name of\n[the Font Awesome 4.7 icon](https://fontawesome.com/v4.7/icons/) to\ndisplay. Do not specify the `fa fa-` classes.\n",
                    "jsdoctags": [
                        {
                            "pos": 248,
                            "end": 261,
                            "flags": 4194304,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 249,
                                "end": 257,
                                "flags": 4194304,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "iconType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconType",
                    "optional": true,
                    "description": "<p>Specifies the type of icon to display. Specifying <code>fa</code> will display a Font Awesome icon,\nwhile specifying <code>skyux</code> will display an icon from the custom SKY UX icon font. Note that\nthe custom SKY UX icon font is currently in beta.</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nSpecifies the type of icon to display. Specifying `fa` will display a Font Awesome icon,\nwhile specifying `skyux` will display an icon from the custom SKY UX icon font. Note that\nthe custom SKY UX icon font is currently in beta.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SkyIndicatorIcon",
            "id": "interface-SkyIndicatorIcon-29c2fc712dd19cd82e998f5638f7c090cc398ff2b50c549a4f730b10527dcbf02a1a6b445474fd71d72d11f3983fa8829d18a8b535402bd0a9b3ff2709523dce",
            "file": "projects/indicators/src/modules/shared/indicator-icon.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SkyIconStackItem } from '../icon/icon-stack-item';\n\n/**\n * @internl\n */\nexport interface SkyIndicatorIcon {\n  defaultThemeIcon: string;\n\n  modernThemeBaseIcon: SkyIconStackItem;\n\n  modernThemeTopIcon: SkyIconStackItem;\n}\n",
            "properties": [
                {
                    "name": "defaultThemeIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "modernThemeBaseIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "modernThemeTopIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SkyToken",
            "id": "interface-SkyToken-67b99ecedc774adeb88d8b748c6e8da0851a16a898798ebef396ad0bf86d72a7111ff5b1138e63a266aa977eb0e042bdb9daf40c03012ab7bbb775b0d53e57e1",
            "file": "projects/indicators/src/modules/tokens/types/token.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SkyToken {\n  /**\n   * Specifies the token's contents.\n   */\n  value: any;\n}\n",
            "properties": [
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Specifies the token&#39;s contents.</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nSpecifies the token's contents.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SkyTokenSelectedEventArgs",
            "id": "interface-SkyTokenSelectedEventArgs-6c5725b22b40e17dd4fe9a1686ee887a63c2b27aae8a8c0c9ea1b80b2c8f0f84daa9fd400b7eb81d1deb80ac1e8f5b066e594a90ef78f4b029deb14544e8b7d3",
            "file": "projects/indicators/src/modules/tokens/types/token-selected-event-args.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SkyToken } from './token';\n\nexport interface SkyTokenSelectedEventArgs {\n  /**\n   * Indicates the currently selected token.\n   */\n  token?: SkyToken;\n}\n",
            "properties": [
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyToken",
                    "optional": true,
                    "description": "<p>Indicates the currently selected token.</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nIndicates the currently selected token.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SkyTokensMessage",
            "id": "interface-SkyTokensMessage-3280188d4f5e030aaa7d4aeb57e3495f1e3b1ade41a59308c4e9a031f52c36e25d83625101b067ad28471dfaf8b4c75d11b354f0bc25aeac36affed636744259",
            "file": "projects/indicators/src/modules/tokens/types/tokens-message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SkyTokensMessageType } from './tokens-message-type';\n\nexport interface SkyTokensMessage {\n  /**\n   * Specifies the type of message.\n   */\n  type?: SkyTokensMessageType;\n}\n",
            "properties": [
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyTokensMessageType",
                    "optional": true,
                    "description": "<p>Specifies the type of message.</p>\n",
                    "line": 7,
                    "rawdescription": "\n\nSpecifies the type of message.\n"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "SkyIconResolverService",
            "id": "injectable-SkyIconResolverService-d05565ac77cbdff314f238d0e99a4fe18823d7304912ac500494c6dc091c20d2c5adf40c88495e7060180d1a1d514caaa196959bc0a69d46eb588e4bf8be70c5",
            "file": "projects/indicators/src/modules/icon/icon-resolver.service.ts",
            "properties": [
                {
                    "name": "glyphMap",
                    "defaultValue": "new Map<string, SkyThemeIconManifestGlyph>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "resolveIcon",
                    "args": [
                        {
                            "name": "iconName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "variant",
                            "type": "SkyIconVariantType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "iconName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "variant",
                            "type": "SkyIconVariantType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nimport {\n  SkyThemeIconManifestGlyph,\n  SkyThemeIconManifestService,\n} from '@skyux/theme';\n\nimport { SkyIconVariantType } from './types/icon-variant-type';\n\n/**\n * @internal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkyIconResolverService {\n  private glyphMap = new Map<string, SkyThemeIconManifestGlyph>();\n\n  constructor(manifestSvc: SkyThemeIconManifestService) {\n    // Map the icons by name for more efficient lookup.\n    for (const glyph of manifestSvc.getManifest().glyphs) {\n      this.glyphMap.set(glyph.name, glyph);\n    }\n  }\n\n  public resolveIcon(iconName: string, variant?: SkyIconVariantType): string {\n    const variantIconName = variant && `${iconName}-${variant}`;\n\n    if (variantIconName && this.glyphMap.has(variantIconName)) {\n      // A variant was specified and exists; return it.\n      return variantIconName;\n    }\n\n    if (variant !== 'line' && !this.glyphMap.has(iconName)) {\n      // Either the solid variant was specified and doesn't exist, or no variant was\n      // specified and a non-variant doesn't exist; fall back to the line variant.\n      const lineIconName = `${iconName}-line`;\n\n      if (this.glyphMap.has(lineIconName)) {\n        return lineIconName;\n      }\n    }\n\n    // Fall back to the icon name as-is.\n    return iconName;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "manifestSvc",
                        "type": "SkyThemeIconManifestService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "manifestSvc",
                        "type": "SkyThemeIconManifestService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SkyWaitAdapterService",
            "id": "injectable-SkyWaitAdapterService-a83359cd12a857012664439d4259c07c8d6043b8d3b68b3ff453e5d48f4c71149a155e7fa273b5f3df69b9bda136179a65b9ec7210770f176e11eebe8c6ae9c3",
            "file": "projects/indicators/src/modules/wait/wait-adapter.service.ts",
            "properties": [
                {
                    "name": "busyElements",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "focussableElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLElement[]",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isPageWaitActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "renderer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Renderer2",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearDocumentFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "clearListeners",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusNextElement",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shiftKey",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "busyEl",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetElement",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shiftKey",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "busyEl",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFocussableElements",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement[]",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isElementBusyOrHidden",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isElementHidden",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isShift",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeWaitBounds",
                    "args": [
                        {
                            "name": "waitEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "waitEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBusyState",
                    "args": [
                        {
                            "name": "waitEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isFullPage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isWaiting",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isNonBlocking",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "waitComponentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "waitEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isFullPage",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isWaiting",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isNonBlocking",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "waitComponentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWaitBounds",
                    "args": [
                        {
                            "name": "waitEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "waitEl",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import {\n  ElementRef,\n  Injectable,\n  OnDestroy,\n  Renderer2,\n  RendererFactory2,\n} from '@angular/core';\n\n// Need to add the following to classes which contain static methods.\n// See: https://github.com/ng-packagr/ng-packagr/issues/641\n/**\n * @internal\n * @dynamic\n */\n@Injectable()\nexport class SkyWaitAdapterService implements OnDestroy {\n  private static isPageWaitActive = false;\n  private static busyElements: {\n    [key: string]: { busyEl: HTMLElement; listener: any };\n  } = {};\n\n  private focussableElements: HTMLElement[];\n\n  private renderer: Renderer2;\n\n  constructor(private rendererFactory: RendererFactory2) {\n    this.renderer = this.rendererFactory.createRenderer(undefined, undefined);\n  }\n\n  public ngOnDestroy(): void {\n    this.clearListeners();\n  }\n\n  public setWaitBounds(waitEl: ElementRef): void {\n    this.renderer.setStyle(\n      waitEl.nativeElement.parentElement,\n      'position',\n      'relative'\n    );\n  }\n\n  public removeWaitBounds(waitEl: ElementRef): void {\n    this.renderer.removeStyle(waitEl.nativeElement.parentElement, 'position');\n  }\n\n  public setBusyState(\n    waitEl: ElementRef,\n    isFullPage: boolean,\n    isWaiting: boolean,\n    isNonBlocking = false,\n    waitComponentId?: string\n  ): void {\n    const busyEl = isFullPage\n      ? document.body\n      : waitEl.nativeElement.parentElement;\n\n    if (!isNonBlocking) {\n      if (isWaiting) {\n        this.renderer.setAttribute(busyEl, 'aria-busy', 'true');\n\n        // Remove focus from page when full page blocking wait\n        if (isFullPage || busyEl.contains(document.activeElement)) {\n          this.clearDocumentFocus();\n        }\n\n        if (isFullPage) {\n          SkyWaitAdapterService.isPageWaitActive = true;\n          const endListenerFunc = this.renderer.listen(\n            document.body,\n            'keydown',\n            (event: KeyboardEvent) => {\n              /*istanbul ignore else */\n              if (event.key) {\n                /* istanbul ignore else */\n                if (event.key.toLowerCase() === 'tab') {\n                  (event.target as any).blur();\n                  event.preventDefault();\n                  event.stopPropagation();\n                  event.stopImmediatePropagation();\n                  this.clearDocumentFocus();\n                }\n              }\n            }\n          );\n          SkyWaitAdapterService.busyElements[waitComponentId] = {\n            listener: endListenerFunc,\n            busyEl: undefined,\n          };\n        } else {\n          const endListenerFunc = this.renderer.listen(\n            busyEl,\n            'focusin',\n            (event: KeyboardEvent) => {\n              /* istanbul ignore else */\n              if (!isNonBlocking) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.stopImmediatePropagation();\n\n                if (SkyWaitAdapterService.isPageWaitActive) {\n                  this.clearDocumentFocus();\n                } else {\n                  // Propagate tab navigation if attempted into waited element\n                  const target: any = event.target;\n                  target.blur();\n                  this.focusNextElement(target, this.isShift(event), busyEl);\n                }\n              }\n            }\n          );\n          SkyWaitAdapterService.busyElements[waitComponentId] = {\n            listener: endListenerFunc,\n            busyEl: busyEl,\n          };\n        }\n      } else {\n        this.renderer.removeAttribute(busyEl, 'aria-busy');\n\n        if (isFullPage) {\n          SkyWaitAdapterService.isPageWaitActive = false;\n        }\n        if (waitComponentId in SkyWaitAdapterService.busyElements) {\n          SkyWaitAdapterService.busyElements[waitComponentId].listener();\n          delete SkyWaitAdapterService.busyElements[waitComponentId];\n        }\n      }\n    }\n  }\n\n  private focusNextElement(\n    targetElement: HTMLElement,\n    shiftKey: boolean,\n    busyEl: Element\n  ): void {\n    const focussable = this.getFocussableElements();\n\n    // If shift tab, go in the other direction\n    const modifier = shiftKey ? -1 : 1;\n\n    // Find the next navigable element that isn't waiting\n    const startingIndex = focussable.indexOf(targetElement);\n    let curIndex = startingIndex + modifier;\n    while (\n      focussable[curIndex] &&\n      this.isElementBusyOrHidden(focussable[curIndex])\n    ) {\n      curIndex += modifier;\n    }\n\n    if (\n      focussable[curIndex] &&\n      !this.isElementBusyOrHidden(focussable[curIndex])\n    ) {\n      focussable[curIndex].focus();\n    } else {\n      // Try wrapping the navigation\n      /* istanbul ignore next */\n      /* sanity check */\n      curIndex = modifier > 0 ? 0 : focussable.length - 1;\n      while (\n        curIndex !== startingIndex &&\n        focussable[curIndex] &&\n        this.isElementBusyOrHidden(focussable[curIndex])\n      ) {\n        /* istanbul ignore next */\n        /* sanity check */\n        curIndex += modifier;\n      }\n\n      /* istanbul ignore else */\n      /* sanity check */\n      if (\n        focussable[curIndex] &&\n        !this.isElementBusyOrHidden(focussable[curIndex])\n      ) {\n        focussable[curIndex].focus();\n      } else {\n        // No valid target, wipe focus\n        this.clearDocumentFocus();\n      }\n    }\n\n    // clear focussableElements list\n    this.focussableElements = undefined;\n  }\n\n  private isShift(event: Event): boolean {\n    // Determine if shift+tab was used based on element order\n    const elements = this.getFocussableElements().filter(\n      (elem) => !this.isElementHidden(elem)\n    );\n\n    const previousInd = elements.indexOf((event as any).relatedTarget);\n    const currentInd = elements.indexOf(event.target as HTMLElement);\n\n    return (\n      previousInd === currentInd + 1 ||\n      (previousInd === 0 && currentInd === elements.length - 1) ||\n      previousInd > currentInd ||\n      !(event as any).relatedTarget\n    );\n  }\n\n  private isElementHidden(element: any): boolean {\n    const style = window.getComputedStyle(element);\n    return style.display === 'none' || style.visibility === 'hidden';\n  }\n\n  private isElementBusyOrHidden(element: any): boolean {\n    if (this.isElementHidden(element)) {\n      return true;\n    }\n\n    for (const key of Object.keys(SkyWaitAdapterService.busyElements)) {\n      const parentElement = SkyWaitAdapterService.busyElements[key].busyEl;\n      if (parentElement && parentElement.contains(element)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private clearDocumentFocus(): void {\n    /* istanbul ignore else */\n    if (document.activeElement && (document.activeElement as any).blur) {\n      (document.activeElement as any).blur();\n    }\n    document.body.focus();\n  }\n\n  private getFocussableElements(): HTMLElement[] {\n    // Keep this cached so we can reduce querys\n    if (this.focussableElements) {\n      return this.focussableElements;\n    }\n\n    // Select all possible focussable elements\n    const focussableElements =\n      'a[href], ' +\n      'area[href], ' +\n      \"input:not([disabled]):not([tabindex='-1']), \" +\n      \"button:not([disabled]):not([tabindex='-1']), \" +\n      \"select:not([disabled]):not([tabindex='-1']), \" +\n      \"textarea:not([disabled]):not([tabindex='-1']), \" +\n      'iframe, object, embed, ' +\n      \"*[tabindex]:not([tabindex='-1']), \" +\n      '*[contenteditable=true]';\n\n    this.focussableElements = Array.prototype.filter.call(\n      document.body.querySelectorAll(focussableElements),\n      (element: any) => {\n        return (\n          element.offsetWidth > 0 ||\n          element.offsetHeight > 0 ||\n          element === document.activeElement\n        );\n      }\n    );\n    return this.focussableElements;\n  }\n\n  private clearListeners(): void {\n    SkyWaitAdapterService.isPageWaitActive = false;\n    for (const key of Object.keys(SkyWaitAdapterService.busyElements)) {\n      SkyWaitAdapterService.busyElements[key].listener();\n      delete SkyWaitAdapterService.busyElements[key];\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "rendererFactory",
                        "type": "RendererFactory2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SkyWaitPageAdapterService",
            "id": "injectable-SkyWaitPageAdapterService-abe9e6b48bcff94c25f3aa5461e1bc8e161e3b6898915822ac8dc0512cb81ee17f6b36bbd1e4c2e91c766e5b0f3f62f0df5bc3a337d2c39f7a61ccb5629d81b5",
            "file": "projects/indicators/src/modules/wait/wait-page-adapter.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addPageWaitEl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removePageWaitEl",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n/**\n * @internal\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkyWaitPageAdapterService {\n  public addPageWaitEl(): void {\n    document.body.appendChild(document.createElement('sky-wait-page'));\n  }\n\n  public removePageWaitEl(): void {\n    const waitEl = document.querySelector('sky-wait-page');\n    if (waitEl) {\n      document.body.removeChild(waitEl);\n    }\n  }\n}\n",
            "type": "injectable"
        },
        {
            "name": "SkyWaitService",
            "id": "injectable-SkyWaitService-0c42fc9f8cbdd1bff341025bbab80a2d0ff9b428394026634d358d8274378a6db818b926e8d845d7f0bcf8824f64508610e8edb70241a4ab0c3e8b39d8df5a7b",
            "file": "projects/indicators/src/modules/wait/wait.service.ts",
            "properties": [
                {
                    "name": "pageWaitBlockingCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "pageWaitNonBlockingCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        121,
                        124
                    ]
                },
                {
                    "name": "waitComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyWaitPageComponent",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        121,
                        124
                    ]
                }
            ],
            "methods": [
                {
                    "name": "beginBlockingPageWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStarts a blocking page wait on the page.\n",
                    "description": "<p>Starts a blocking page wait on the page.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "beginNonBlockingPageWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nStarts a non-blocking page wait on the page.\n",
                    "description": "<p>Starts a non-blocking page wait on the page.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "beginPageWait",
                    "args": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "blockingWrap",
                    "args": [
                        {
                            "name": "observable",
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLaunches a page wait and automatically stops when the specific asynchronous event completes.\n",
                    "description": "<p>Launches a page wait and automatically stops when the specific asynchronous event completes.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "observable",
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAllPageWaits",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nClears all blocking and non-blocking page waits on the page.\n",
                    "description": "<p>Clears all blocking and non-blocking page waits on the page.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "clearPageWait",
                    "args": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dispose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n",
                    "description": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": []
                },
                {
                    "name": "endBlockingPageWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnds a blocking page wait on the page. Blocking page wait indication\nis removed when all running blocking page waits are ended.\n",
                    "description": "<p>Ends a blocking page wait on the page. Blocking page wait indication\nis removed when all running blocking page waits are ended.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "endNonBlockingPageWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnds a non-blocking page wait on the page. Non-blocking page wait indication\nis removed when all running non-blocking page waits are ended.\n",
                    "description": "<p>Ends a non-blocking page wait on the page. Non-blocking page wait indication\nis removed when all running non-blocking page waits are ended.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "endPageWait",
                    "args": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nonBlockingWrap",
                    "args": [
                        {
                            "name": "observable",
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLaunches a non-blocking page wait and automatically stops when the specific\nasynchronous event completes.\n",
                    "description": "<p>Launches a non-blocking page wait and automatically stops when the specific\nasynchronous event completes.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "observable",
                            "type": "Observable<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setWaitComponentProperties",
                    "args": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  Injectable,\n} from '@angular/core';\n\nimport { SkyAppWindowRef } from '@skyux/core';\n\nimport { defer as observableDefer, Observable } from 'rxjs';\n\nimport { finalize } from 'rxjs/operators';\n\nimport { SkyWaitPageAdapterService } from './wait-page-adapter.service';\n\nimport { SkyWaitPageComponent } from './wait-page.component';\n\n// Need to add the following to classes which contain static methods.\n// See: https://github.com/ng-packagr/ng-packagr/issues/641\n// @dynamic\n@Injectable({\n  providedIn: 'root',\n})\nexport class SkyWaitService {\n  private static waitComponent: SkyWaitPageComponent;\n  private static pageWaitBlockingCount = 0;\n  private static pageWaitNonBlockingCount = 0;\n\n  constructor(\n    private resolver: ComponentFactoryResolver,\n    private appRef: ApplicationRef,\n    private waitAdapter: SkyWaitPageAdapterService,\n    private windowSvc: SkyAppWindowRef\n  ) {}\n\n  /**\n   * Starts a blocking page wait on the page.\n   */\n  public beginBlockingPageWait(): void {\n    this.beginPageWait(true);\n  }\n\n  /**\n   * Starts a non-blocking page wait on the page.\n   */\n  public beginNonBlockingPageWait(): void {\n    this.beginPageWait(false);\n  }\n\n  /**\n   * Ends a blocking page wait on the page. Blocking page wait indication\n   * is removed when all running blocking page waits are ended.\n   */\n  public endBlockingPageWait(): void {\n    this.endPageWait(true);\n  }\n\n  /**\n   * Ends a non-blocking page wait on the page. Non-blocking page wait indication\n   * is removed when all running non-blocking page waits are ended.\n   */\n  public endNonBlockingPageWait(): void {\n    this.endPageWait(false);\n  }\n\n  /**\n   * Clears all blocking and non-blocking page waits on the page.\n   */\n  public clearAllPageWaits(): void {\n    this.clearPageWait(true);\n    this.clearPageWait(false);\n  }\n\n  /**\n   * @internal\n   */\n  public dispose(): void {\n    if (SkyWaitService.waitComponent) {\n      SkyWaitService.waitComponent = undefined;\n      SkyWaitService.pageWaitBlockingCount = 0;\n      SkyWaitService.pageWaitNonBlockingCount = 0;\n      this.waitAdapter.removePageWaitEl();\n    }\n  }\n\n  /**\n   * Launches a page wait and automatically stops when the specific asynchronous event completes.\n   */\n  public blockingWrap<T>(observable: Observable<T>): Observable<T> {\n    return observableDefer(() => {\n      this.beginBlockingPageWait();\n      return observable.pipe(finalize(() => this.endBlockingPageWait()));\n    });\n  }\n\n  /**\n   * Launches a non-blocking page wait and automatically stops when the specific\n   * asynchronous event completes.\n   */\n  public nonBlockingWrap<T>(observable: Observable<T>): Observable<T> {\n    return observableDefer(() => {\n      this.beginNonBlockingPageWait();\n      return observable.pipe(finalize(() => this.endNonBlockingPageWait()));\n    });\n  }\n\n  private setWaitComponentProperties(isBlocking: boolean): void {\n    if (isBlocking) {\n      SkyWaitService.waitComponent.hasBlockingWait = true;\n      SkyWaitService.pageWaitBlockingCount++;\n    } else {\n      SkyWaitService.waitComponent.hasNonBlockingWait = true;\n      SkyWaitService.pageWaitNonBlockingCount++;\n    }\n  }\n\n  private beginPageWait(isBlocking: boolean): void {\n    if (!SkyWaitService.waitComponent) {\n      /*\n          Dynamic component creation needs to be done in a timeout to prevent ApplicationRef from\n          crashing when wait service is called in Angular lifecycle functions.\n      */\n      this.windowSvc.nativeWindow.setTimeout(() => {\n        // Ensuring here that we recheck this after the setTimeout is over so that we don't clash\n        // with any other waits that are created.\n        if (!SkyWaitService.waitComponent) {\n          const factory =\n            this.resolver.resolveComponentFactory(SkyWaitPageComponent);\n          this.waitAdapter.addPageWaitEl();\n\n          const cmpRef = this.appRef.bootstrap(factory);\n          SkyWaitService.waitComponent = cmpRef.instance;\n        }\n\n        this.setWaitComponentProperties(isBlocking);\n      });\n    } else {\n      this.setWaitComponentProperties(isBlocking);\n    }\n  }\n\n  private endPageWait(isBlocking: boolean): void {\n    /*\n        Needs to yield so that wait creation can finish\n        before it is dismissed in the event of a race.\n    */\n    this.windowSvc.nativeWindow.setTimeout(() => {\n      if (SkyWaitService.waitComponent) {\n        if (isBlocking) {\n          if (SkyWaitService.pageWaitBlockingCount > 0) {\n            SkyWaitService.pageWaitBlockingCount--;\n          }\n\n          if (SkyWaitService.pageWaitBlockingCount < 1) {\n            SkyWaitService.waitComponent.hasBlockingWait = false;\n          }\n        } else {\n          if (SkyWaitService.pageWaitNonBlockingCount > 0) {\n            SkyWaitService.pageWaitNonBlockingCount--;\n          }\n\n          if (SkyWaitService.pageWaitNonBlockingCount < 1) {\n            SkyWaitService.waitComponent.hasNonBlockingWait = false;\n          }\n        }\n      }\n    });\n  }\n\n  private clearPageWait(isBlocking: boolean): void {\n    if (SkyWaitService.waitComponent) {\n      if (isBlocking) {\n        SkyWaitService.pageWaitBlockingCount = 0;\n        SkyWaitService.waitComponent.hasBlockingWait = false;\n      } else {\n        SkyWaitService.pageWaitNonBlockingCount = 0;\n        SkyWaitService.waitComponent.hasNonBlockingWait = false;\n      }\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "waitAdapter",
                        "type": "SkyWaitPageAdapterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "windowSvc",
                        "type": "SkyAppWindowRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "resolver",
                        "type": "ComponentFactoryResolver",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "appRef",
                        "type": "ApplicationRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "waitAdapter",
                        "type": "SkyWaitPageAdapterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "windowSvc",
                        "type": "SkyAppWindowRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-d83b95cb897fd7f1ecc7216a31a9167598810a902c9c43ec11b6a93965548994186b900fe348e64bdf35a97b36d2fdb26731097dc1738e7f73bc67d2d432a47c",
            "file": "projects/indicators-showcase/e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SkyAlertFixture",
            "id": "class-SkyAlertFixture-0f887899cb848e27fe98ce2e276be2727f02c7cb6456869532ee1884aaccfc1ab8015a7e472fd840bcefc8c0e08c6ea7ac19dc21fb40b6ad56d9a6c93a81bff6",
            "file": "projects/indicators/testing/src/alert-fixture.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ComponentFixture } from '@angular/core/testing';\n\nimport { DebugElement } from '@angular/core';\n\nimport { By } from '@angular/platform-browser';\n\nimport { SkyAppTestUtility } from '@skyux-sdk/testing';\n\n/**\n * Allows interaction with a SKY UX alert component.\n */\nexport class SkyAlertFixture {\n  /**\n   * The alert's current text.\n   */\n  public get text(): string {\n    return SkyAppTestUtility.getText(this.debugEl);\n  }\n\n  /**\n   * A flag indicating whether the alert can be closed.\n   */\n  public get closeable(): boolean {\n    const closeBtnEl = this.getCloseBtnEl();\n\n    return SkyAppTestUtility.isVisible(closeBtnEl);\n  }\n\n  /**\n   * Returns a flag indicating whether the alert is closed.\n   */\n  public get closed(): boolean {\n    return !SkyAppTestUtility.isVisible(this.getAlertEl());\n  }\n\n  /**\n   * The alert's current type.\n   */\n  public get alertType(): string {\n    const clsList = this.getAlertEl().nativeElement.classList;\n\n    if (clsList.contains('sky-alert-danger')) {\n      return 'danger';\n    }\n\n    if (clsList.contains('sky-alert-info')) {\n      return 'info';\n    }\n\n    if (clsList.contains('sky-alert-success')) {\n      return 'success';\n    }\n\n    if (clsList.contains('sky-alert-warning')) {\n      return 'warning';\n    }\n\n    return undefined;\n  }\n\n  private debugEl: DebugElement;\n\n  constructor(fixture: ComponentFixture<any>, skyTestId: string) {\n    this.debugEl = SkyAppTestUtility.getDebugElementByTestId(\n      fixture,\n      skyTestId,\n      'sky-alert'\n    );\n  }\n\n  /**\n   * Closes the alert.  If the alert is not closeable, an error is thrown.\n   */\n  public close(): void {\n    if (this.closeable) {\n      const closeBtnEl = this.getCloseBtnEl();\n\n      closeBtnEl.triggerEventHandler('click', {});\n    } else {\n      throw new Error('The alert is not closeable.');\n    }\n  }\n\n  private getAlertEl(): DebugElement {\n    return this.debugEl.query(By.css('.sky-alert'));\n  }\n\n  private getCloseBtnEl(): DebugElement {\n    return this.debugEl.query(By.css('.sky-alert-close'));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "skyTestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "skyTestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "debugEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DebugElement",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "description": "<p>Allows interaction with a SKY UX alert component.</p>\n",
            "rawdescription": "\n\nAllows interaction with a SKY UX alert component.\n",
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCloses the alert.  If the alert is not closeable, an error is thrown.\n",
                    "description": "<p>Closes the alert.  If the alert is not closeable, an error is thrown.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getAlertEl",
                    "args": [],
                    "optional": false,
                    "returnType": "DebugElement",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getCloseBtnEl",
                    "args": [],
                    "optional": false,
                    "returnType": "DebugElement",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "text": {
                    "name": "text",
                    "getSignature": {
                        "name": "text",
                        "type": "string",
                        "returnType": "string",
                        "line": 16,
                        "rawdescription": "\n\nThe alert's current text.\n",
                        "description": "<p>The alert&#39;s current text.</p>\n"
                    }
                },
                "closeable": {
                    "name": "closeable",
                    "getSignature": {
                        "name": "closeable",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 23,
                        "rawdescription": "\n\nA flag indicating whether the alert can be closed.\n",
                        "description": "<p>A flag indicating whether the alert can be closed.</p>\n"
                    }
                },
                "closed": {
                    "name": "closed",
                    "getSignature": {
                        "name": "closed",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32,
                        "rawdescription": "\n\nReturns a flag indicating whether the alert is closed.\n",
                        "description": "<p>Returns a flag indicating whether the alert is closed.</p>\n"
                    }
                },
                "alertType": {
                    "name": "alertType",
                    "getSignature": {
                        "name": "alertType",
                        "type": "string",
                        "returnType": "string",
                        "line": 39,
                        "rawdescription": "\n\nThe alert's current type.\n",
                        "description": "<p>The alert&#39;s current type.</p>\n"
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SkyIndicatorIconUtility",
            "id": "class-SkyIndicatorIconUtility-002581fc9c1b00bd81917d1bfa0873e98f55cdae211db6b80ada46db52326e2e14176b57561690da21df01105f3e1e3bb9a9ad1a53a16f18abf4056062ad1dba",
            "file": "projects/indicators/src/modules/shared/indicator-icon-utility.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SkyIndicatorIcon } from './indicator-icon';\n\nimport { SkyIndicatorIconType } from './indicator-icon-type';\n\n/**\n * @internl\n */\nexport class SkyIndicatorIconUtility {\n  public static getIconsForType(\n    indicatorType: SkyIndicatorIconType\n  ): SkyIndicatorIcon {\n    let icon: string;\n    let baseIcon: string;\n    let topIcon: string;\n\n    // tslint:disable-next-line: switch-default\n    switch (indicatorType) {\n      case 'danger':\n      case 'warning':\n        icon = 'warning';\n        baseIcon = 'triangle-solid';\n        topIcon = 'exclamation';\n        break;\n      case 'info':\n        icon = 'exclamation-circle';\n        baseIcon = 'circle-solid';\n        topIcon = 'help-i';\n        break;\n      case 'success':\n        icon = 'check';\n        baseIcon = 'circle-solid';\n        topIcon = 'check';\n        break;\n    }\n\n    return {\n      defaultThemeIcon: icon,\n      modernThemeBaseIcon: {\n        icon: baseIcon,\n        iconType: 'skyux',\n      },\n      modernThemeTopIcon: {\n        icon: topIcon,\n        iconType: 'skyux',\n      },\n    };\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getIconsForType",
                    "args": [
                        {
                            "name": "indicatorType",
                            "type": "SkyIndicatorIconType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SkyIndicatorIcon",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "indicatorType",
                            "type": "SkyIndicatorIconType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SkyIndicatorsResourcesProvider",
            "id": "class-SkyIndicatorsResourcesProvider-0971090ec1ec96ea64050feca2892c6f7b84470ccb02c9d6cbefe7c12f0ce3b03accaeefb0e30c133bdb09d1431555d8e5361ce96cc897780caa930f6d77554f",
            "file": "projects/indicators/src/modules/shared/sky-indicators-resources.module.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { NgModule } from '@angular/core';\nimport {\n  getLibStringForLocale,\n  SkyAppLocaleInfo,\n  SkyI18nModule,\n  SkyLibResources,\n  SkyLibResourcesProvider,\n  SKY_LIB_RESOURCES_PROVIDERS,\n} from '@skyux/i18n';\n\nconst RESOURCES: { [locale: string]: SkyLibResources } = {\n  'EN-US': {\n    skyux_alert_close: { message: 'Close the alert' },\n    skyux_chevron_collapse: { message: 'Collapse' },\n    skyux_chevron_expand: { message: 'Expand' },\n    skyux_help_inline_button_title: { message: 'Show help content' },\n    skyux_status_indicator_sr_completed: { message: 'Completed:' },\n    skyux_status_indicator_sr_error: { message: 'Error:' },\n    skyux_status_indicator_sr_important_info: {\n      message: 'Important information:',\n    },\n    skyux_status_indicator_sr_warning: { message: 'Warning:' },\n    skyux_tokens_dismiss_button_title: { message: 'Remove item' },\n    skyux_wait_aria_alt_text: { message: 'Loading.' },\n    skyux_wait_blocking_aria_alt_text: { message: 'Loading. Please wait.' },\n    skyux_wait_page_aria_alt_text: { message: 'Page loading.' },\n    skyux_wait_page_blocking_aria_alt_text: {\n      message: 'Page loading. Please wait.',\n    },\n  },\n};\n\nexport class SkyIndicatorsResourcesProvider implements SkyLibResourcesProvider {\n  public getString(localeInfo: SkyAppLocaleInfo, name: string): string {\n    return getLibStringForLocale(RESOURCES, localeInfo.locale, name);\n  }\n}\n\n/**\n * Import into any component library module that needs to use resource strings.\n */\n@NgModule({\n  exports: [SkyI18nModule],\n  providers: [\n    {\n      provide: SKY_LIB_RESOURCES_PROVIDERS,\n      useClass: SkyIndicatorsResourcesProvider,\n      multi: true,\n    },\n  ],\n})\nexport class SkyIndicatorsResourcesModule {}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getString",
                    "args": [
                        {
                            "name": "localeInfo",
                            "type": "SkyAppLocaleInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "localeInfo",
                            "type": "SkyAppLocaleInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "SkyLibResourcesProvider"
            ]
        },
        {
            "name": "SkyLabelFixture",
            "id": "class-SkyLabelFixture-fa9d45aaab286cdadf929161c7f809921e88204953d563e5d5cd3fd25ed28ef70f5d9702c830d51c942d5c0cf791f2e725ac789112dbf64f9a0c96e129e2a842",
            "file": "projects/indicators/testing/src/label-fixture.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ComponentFixture } from '@angular/core/testing';\n\nimport { DebugElement } from '@angular/core';\n\nimport { By } from '@angular/platform-browser';\n\nimport { SkyAppTestUtility } from '@skyux-sdk/testing';\n\n/**\n * Allows interaction with a SKY UX label component.\n */\nexport class SkyLabelFixture {\n  /**\n   * The label's current type.\n   */\n  public get labelType(): string {\n    const clsList = this.getLabelEl().nativeElement.classList;\n\n    if (clsList.contains('sky-label-danger')) {\n      return 'danger';\n    }\n\n    if (clsList.contains('sky-label-info')) {\n      return 'info';\n    }\n\n    if (clsList.contains('sky-label-success')) {\n      return 'success';\n    }\n\n    if (clsList.contains('sky-label-warning')) {\n      return 'warning';\n    }\n\n    return undefined;\n  }\n\n  /**\n   * The label's current text.\n   */\n  public get text(): string {\n    const labelEl = this.getLabelEl();\n\n    return SkyAppTestUtility.getText(labelEl);\n  }\n\n  private debugEl: DebugElement;\n\n  constructor(fixture: ComponentFixture<any>, skyTestId: string) {\n    this.debugEl = SkyAppTestUtility.getDebugElementByTestId(\n      fixture,\n      skyTestId,\n      'sky-label'\n    );\n  }\n\n  private getLabelEl(): DebugElement {\n    return this.debugEl.query(By.css('.sky-label'));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "skyTestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "skyTestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "debugEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DebugElement",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "description": "<p>Allows interaction with a SKY UX label component.</p>\n",
            "rawdescription": "\n\nAllows interaction with a SKY UX label component.\n",
            "methods": [
                {
                    "name": "getLabelEl",
                    "args": [],
                    "optional": false,
                    "returnType": "DebugElement",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "labelType": {
                    "name": "labelType",
                    "getSignature": {
                        "name": "labelType",
                        "type": "string",
                        "returnType": "string",
                        "line": 16,
                        "rawdescription": "\n\nThe label's current type.\n",
                        "description": "<p>The label&#39;s current type.</p>\n"
                    }
                },
                "text": {
                    "name": "text",
                    "getSignature": {
                        "name": "text",
                        "type": "string",
                        "returnType": "string",
                        "line": 41,
                        "rawdescription": "\n\nThe label's current text.\n",
                        "description": "<p>The label&#39;s current text.</p>\n"
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SkyWaitFixture",
            "id": "class-SkyWaitFixture-b6a2542018937ce2835dcf3444de5ac386f3e524bac3d15197a85f389edf22756a59590c0f1466892045026579656f9defcf131ba7bcd494fb935f8a04d1f6dc",
            "file": "projects/indicators/testing/src/wait-fixture.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DebugElement } from '@angular/core';\n\nimport { ComponentFixture } from '@angular/core/testing';\n\nimport { SkyAppTestUtility } from '@skyux-sdk/testing';\n\nexport class SkyWaitFixture {\n  public get isWaiting(): boolean {\n    return this.innerWaitComponentContainsClass('.sky-wait-mask');\n  }\n\n  public get isFullPage(): boolean {\n    return this.innerWaitComponentContainsClass('.sky-wait-mask-loading-fixed');\n  }\n\n  public get ariaLabel(): string {\n    const div: HTMLDivElement =\n      this.debugEl.nativeElement.querySelector('.sky-wait-mask');\n    return div.getAttribute('aria-label');\n  }\n\n  public get isNonBlocking(): boolean {\n    return this.innerWaitComponentContainsClass(\n      '.sky-wait-mask-loading-non-blocking'\n    );\n  }\n\n  private debugEl: DebugElement;\n\n  constructor(fixture: ComponentFixture<any>, skyTestId: string) {\n    this.debugEl = SkyAppTestUtility.getDebugElementByTestId(\n      fixture,\n      skyTestId,\n      'sky-wait'\n    );\n  }\n\n  private innerWaitComponentContainsClass(className: string): boolean {\n    const element: HTMLDivElement =\n      this.debugEl.nativeElement.querySelector(className);\n    return element !== null;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "skyTestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fixture",
                        "type": "ComponentFixture<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "skyTestId",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "debugEl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DebugElement",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "innerWaitComponentContainsClass",
                    "args": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "className",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "accessors": {
                "isWaiting": {
                    "name": "isWaiting",
                    "getSignature": {
                        "name": "isWaiting",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 8
                    }
                },
                "isFullPage": {
                    "name": "isFullPage",
                    "getSignature": {
                        "name": "isFullPage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 12
                    }
                },
                "ariaLabel": {
                    "name": "ariaLabel",
                    "getSignature": {
                        "name": "ariaLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 16
                    }
                },
                "isNonBlocking": {
                    "name": "isNonBlocking",
                    "getSignature": {
                        "name": "isNonBlocking",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 22
                    }
                }
            },
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "SkyTextHighlightDirective",
            "id": "directive-SkyTextHighlightDirective-26095dd7091258bb2b3f22dbe639a2430c730e9091cec2b941f7388c7e04c675b6dec54d77b55a2204243244a34af41cf64538ac4a73f3053550abd73ff650c9",
            "file": "projects/indicators/src/modules/text-highlight/text-highlight.directive.ts",
            "type": "directive",
            "description": "<p>Highlights all matching text within DOM elements that it is placed on.\nThe directive is only valid for elements that contain content, so you\ncannot place it on <code>ng-template</code>, <code>ng-content</code>, or <code>ng-container</code> tags.</p>\n",
            "rawdescription": "\n\nHighlights all matching text within DOM elements that it is placed on.\nThe directive is only valid for elements that contain content, so you\ncannot place it on `ng-template`, `ng-content`, or `ng-container` tags.\n",
            "sourceCode": "import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n} from '@angular/core';\n\nimport { MutationObserverService } from '@skyux/core';\n\nconst className = 'sky-highlight-mark';\n\n// Need to add the following to classes which contain static methods.\n// See: https://github.com/ng-packagr/ng-packagr/issues/641\n// @dynamic\n/**\n * Highlights all matching text within DOM elements that it is placed on.\n * The directive is only valid for elements that contain content, so you\n * cannot place it on `ng-template`, `ng-content`, or `ng-container` tags.\n */\n@Directive({\n  selector: '[skyHighlight]',\n})\nexport class SkyTextHighlightDirective\n  implements OnChanges, AfterViewInit, OnDestroy\n{\n  /**\n   * Specifies the text to highlight.\n   */\n  @Input()\n  public set skyHighlight(value: string | string[]) {\n    value = value || [];\n    this._skyHighlight = [];\n\n    if (Array.isArray(value)) {\n      this._skyHighlight = value.filter((item) => !!item);\n      // Reorder strings by their length in descending order to avoid missing matches\n      // that contain substrings of other matches.\n      this._skyHighlight.sort(function (a, b) {\n        return b.length - a.length;\n      });\n    } else {\n      this._skyHighlight = [value as string];\n    }\n  }\n\n  private existingHighlight = false;\n\n  private observer: MutationObserver;\n\n  private _skyHighlight: string[];\n\n  constructor(\n    private el: ElementRef,\n    private observerService: MutationObserverService\n  ) {}\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    if (changes.skyHighlight && !changes.skyHighlight.firstChange) {\n      this.highlight();\n    }\n  }\n\n  public ngAfterViewInit(): void {\n    const self = this;\n    this.observer = this.observerService.create(\n      (mutations: MutationRecord[]) => {\n        self.highlight();\n      }\n    );\n\n    this.observeDom();\n    if (this._skyHighlight && this._skyHighlight.length > 0) {\n      this.highlight();\n    }\n  }\n\n  public ngOnDestroy(): void {\n    /* istanbul ignore else */\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n  }\n\n  private readyForHighlight(searchText: string[]): boolean {\n    return searchText && searchText.length > 0 && this.el.nativeElement;\n  }\n\n  private highlight(): void {\n    /* istanbul ignore else */\n    if (this.observer) {\n      this.observer.disconnect();\n    }\n\n    const searchText = this._skyHighlight;\n\n    if (this.existingHighlight) {\n      SkyTextHighlightDirective.removeHighlight(this.el);\n    }\n\n    /* istanbul ignore else */\n    if (this.readyForHighlight(searchText)) {\n      const node: HTMLElement = this.el.nativeElement;\n\n      // mark all matched text in the DOM\n      SkyTextHighlightDirective.markTextNodes(node, searchText);\n      this.existingHighlight = true;\n    }\n\n    this.observeDom();\n  }\n\n  private observeDom(): void {\n    /* istanbul ignore else */\n    if (this.observer) {\n      const config = {\n        attributes: false,\n        childList: true,\n        characterData: true,\n      };\n      this.observer.observe(this.el.nativeElement, config);\n    }\n  }\n\n  private static cleanRegex(regex: string): string {\n    return regex.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n  }\n\n  private static markNode(node: any, searchTerms: string[]): number {\n    /* istanbul ignore else */\n    if (searchTerms) {\n      const text = node.nodeValue;\n      for (let i = 0; i < searchTerms.length; i++) {\n        searchTerms[i] = this.cleanRegex(searchTerms[i]);\n      }\n      const searchRegex = new RegExp(searchTerms.join('|'), 'gi');\n      const match = searchRegex.exec(text);\n      if (match) {\n        // Split apart text node with mark tags in the middle on the search term.\n        const matchIndex = match.index;\n\n        const middle = node.splitText(matchIndex);\n        middle.splitText(searchRegex.lastIndex - matchIndex);\n        const middleClone = middle.cloneNode(true);\n\n        const markNode = document.createElement('mark');\n        markNode.className = className;\n        markNode.appendChild(middleClone);\n        middle.parentNode.replaceChild(markNode, middle);\n\n        return 1;\n      }\n    }\n    return 0;\n  }\n\n  private static markTextNodes(\n    node: HTMLElement,\n    searchTerms: string[]\n  ): number {\n    if (node.nodeType === 3) {\n      return SkyTextHighlightDirective.markNode(node, searchTerms);\n    } else if (node.nodeType === 1 && node.childNodes) {\n      for (let i = 0; i < node.childNodes.length; i++) {\n        const childNode = node.childNodes[i] as HTMLElement;\n        i += SkyTextHighlightDirective.markTextNodes(childNode, searchTerms);\n      }\n    }\n\n    return 0;\n  }\n\n  private static removeHighlight(el: ElementRef): void {\n    const matchedElements = el.nativeElement.querySelectorAll(\n      `mark.${className}`\n    ) as NodeList;\n\n    /* istanbul ignore else */\n    /* sanity check */\n    if (matchedElements) {\n      for (let i = 0; i < matchedElements.length; i++) {\n        const node = matchedElements[i];\n        const parentNode = node.parentNode;\n\n        parentNode.replaceChild(node.firstChild, node);\n        parentNode.normalize();\n      }\n    }\n  }\n}\n",
            "selector": "[skyHighlight]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "skyHighlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the text to highlight.\n",
                    "description": "<p>Specifies the text to highlight.</p>\n",
                    "line": 33,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_skyHighlight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "existingHighlight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "observer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MutationObserver",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cleanRegex",
                    "args": [
                        {
                            "name": "regex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "regex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "highlight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "markNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchTerms",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerms",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markTextNodes",
                    "args": [
                        {
                            "name": "node",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "searchTerms",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 159,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "searchTerms",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "observeDom",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "readyForHighlight",
                    "args": [
                        {
                            "name": "searchText",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "searchText",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeHighlight",
                    "args": [
                        {
                            "name": "el",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnChanges",
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "observerService",
                        "type": "MutationObserverService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "observerService",
                        "type": "MutationObserverService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "skyHighlight": {
                    "name": "skyHighlight",
                    "setSignature": {
                        "name": "skyHighlight",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "rawdescription": "\n\nSpecifies the text to highlight.\n",
                        "description": "<p>Specifies the text to highlight.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string | string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AlertDemoComponent",
            "id": "component-AlertDemoComponent-4994f1e96a4a902688b17858a97aa07c3b3c61788cd548e34fefbc9f9ef6302f3935463fa221dad4a3ded3b537259b8fcf21ad3afee32da47d3d33bf58d72b65",
            "file": "projects/indicators/documentation/code-examples/alert/basic/alert-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-alert-demo',\n  templateUrl: './alert-demo.component.html',\n})\nexport class AlertDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-alert alertType=\"danger\" [closeable]=\"false\" [closed]=\"false\">\n  Danger alert message\n</sky-alert>\n"
        },
        {
            "name": "AlertTestComponent",
            "id": "component-AlertTestComponent-fa26a2502b46f940db10f766890defa4e8cc2fdb1b00aa89d097e8fe115f7220eba5c325032f13f457957406c43239157a1b4466d91fefe2506f185f8c31e19d",
            "file": "projects/indicators/src/modules/alert/fixtures/alert.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertType",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closeable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "closed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './alert.component.fixture.html',\n})\nexport class AlertTestComponent {\n  public closeable = false;\n\n  public closed = false;\n\n  public alertType = 'info';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-alert [alertType]=\"alertType\" [closeable]=\"closeable\" [(closed)]=\"closed\">\n  Alert\n</sky-alert>\n"
        },
        {
            "name": "AlertVisualComponent",
            "id": "component-AlertVisualComponent-47e7c264def648bf7c919366acaaaa1849eaee7ac118ad0bbe302c55fba63bf03d69c4976941d3d250aec2ecfdbd8a15f2d2d1059c30641cc93adbb6eaa62e7b",
            "file": "projects/indicators-showcase/src/app/visual/alert/alert-visual.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-alert-visual",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./alert-visual.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertCloseable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-alert-visual',\n  templateUrl: './alert-visual.component.html',\n})\nexport class AlertVisualComponent {\n  public alertCloseable = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div class=\"sky-alert-visual\">\n  <sky-alert [alertType]=\"'info'\" [closeable]=\"alertCloseable\">\n    Info alert\n  </sky-alert>\n  <sky-alert [alertType]=\"'success'\" [closeable]=\"alertCloseable\">\n    Success alert\n  </sky-alert>\n  <sky-alert [alertType]=\"'warning'\" [closeable]=\"alertCloseable\">\n    Warning alert\n  </sky-alert>\n  <sky-alert [alertType]=\"'danger'\" [closeable]=\"alertCloseable\">\n    Danger alert\n  </sky-alert>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b9cd44f5f74959c97adb14dce4ff523a2968fa0cae24a5ade3d7e2d08934fad2fb8296664b471b88bf9346e94260445f10c4cb892de1b5ac3cb24c0c54cd2e9a",
            "file": "projects/indicators-showcase/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Renderer2 } from '@angular/core';\nimport {\n  SkyAppStyleLoader,\n  SkyTheme,\n  SkyThemeMode,\n  SkyThemeService,\n  SkyThemeSettings,\n} from '@skyux/theme';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  public isLoaded = false;\n\n  constructor(\n    renderer: Renderer2,\n    themeService: SkyThemeService,\n    styleLoader: SkyAppStyleLoader\n  ) {\n    themeService.init(\n      document.body,\n      renderer,\n      new SkyThemeSettings(\n        SkyTheme.presets['default'],\n        SkyThemeMode.presets.light\n      )\n    );\n\n    styleLoader.loadStyles().then(() => {\n      this.isLoaded = true;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "themeService",
                        "type": "SkyThemeService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "styleLoader",
                        "type": "SkyAppStyleLoader",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "themeService",
                        "type": "SkyThemeService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "styleLoader",
                        "type": "SkyAppStyleLoader",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"isLoaded\" [@.disabled]=\"true\">\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "HelpInlineDemoComponent",
            "id": "component-HelpInlineDemoComponent-16b6588be30d42adf31804b2cfb43dfcf8f9185673036ba6047a266d368aa6b97ef0dab75d0fa4722afde05d782cb986fab2371d6b92021d28a82d0f6954ca61",
            "file": "projects/indicators/documentation/code-examples/help-inline/basic/help-inline-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-help-inline-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./help-inline-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onActionClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-help-inline-demo',\n  templateUrl: './help-inline-demo.component.html',\n})\nexport class HelpInlineDemoComponent {\n  public onActionClick(): void {\n    alert('Help inline button clicked!');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h2>\n  My heading\n  <sky-help-inline (actionClick)=\"onActionClick()\"></sky-help-inline>\n</h2>\n"
        },
        {
            "name": "HelpInlineTestComponent",
            "id": "component-HelpInlineTestComponent-3b8f1303746b3b2c2c610998e708ddfc30b049d01df005b19f5ceeb2acdee1b3d69399411fc5c779e35cc7a05acc541fd775b9f3a91009b3436a77d3202a207f",
            "file": "projects/indicators/src/modules/help-inline/fixtures/help-inline.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./help-inline.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonIsClicked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './help-inline.component.fixture.html',\n})\nexport class HelpInlineTestComponent {\n  public buttonIsClicked = false;\n\n  public buttonClicked(): void {\n    this.buttonIsClicked = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-help-inline (actionClick)=\"buttonClicked()\"> </sky-help-inline>\n"
        },
        {
            "name": "IconDemoComponent",
            "id": "component-IconDemoComponent-71702f8b445bbb11e7f6a44e4b9dfd946fa3a34588357ca028bd9b103f9719880fb04f21753991522c5e3c950ed7a3795a3c6ea7e0f1d3767f25f2a241383b13",
            "file": "projects/indicators/documentation/code-examples/icon/icon-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-icon-demo',\n  templateUrl: './icon-demo.component.html',\n})\nexport class IconDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-icon icon=\"bars\" size=\"lg\"> </sky-icon>\n<sky-icon icon=\"chevron-down\" size=\"sm\"> </sky-icon>\n<sky-icon icon=\"chevron-up\" size=\"5x\"> </sky-icon>\n<sky-icon icon=\"cog\" size=\"2x\"> </sky-icon>\n<sky-icon icon=\"comment\" size=\"xs\"> </sky-icon>\n<sky-icon icon=\"database\" size=\"3x\"> </sky-icon>\n<sky-icon fixedWidth=\"true\" icon=\"spinner\" size=\"3x\"> </sky-icon>\n<sky-icon icon=\"trash\" size=\"sm\"> </sky-icon>\n<sky-icon icon=\"users\" size=\"4x\"> </sky-icon>\n<sky-icon icon=\"user\" size=\"5x\"> </sky-icon>\n<sky-icon icon=\"sort\" iconType=\"skyux\" size=\"5x\"> </sky-icon>\n"
        },
        {
            "name": "IconStackTestComponent",
            "id": "component-IconStackTestComponent-8dc0d4a4361957f660d289bbeed8bd1f6571854fdf3c305d6f39781fbe8a4b9f7d076aefa5bd0432c1fed10d94de9361946a6291cf46f02c1a1d644c13effbc4",
            "file": "projects/indicators/src/modules/icon/fixtures/icon-stack.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon-stack.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "baseIcon",
                    "defaultValue": "{\n    icon: 'circle',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "'3x'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "topIcon",
                    "defaultValue": "{\n    icon: 'bell',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { SkyIconStackItem } from '../icon-stack-item';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './icon-stack.component.fixture.html',\n})\nexport class IconStackTestComponent {\n  public baseIcon: SkyIconStackItem = {\n    icon: 'circle',\n  };\n\n  public topIcon: SkyIconStackItem = {\n    icon: 'bell',\n  };\n\n  public size = '3x';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-icon-stack [baseIcon]=\"baseIcon\" [topIcon]=\"topIcon\" [size]=\"size\">\n</sky-icon-stack>\n"
        },
        {
            "name": "IconTestComponent",
            "id": "component-IconTestComponent-92b5e7e800d6719467d48159afb561363164dd893bb8f6aba3a073282b041d2021330bfd53d7e5a091ff785f79f7f8e2a53cd4faef8630442d81533ddb7762eb",
            "file": "projects/indicators/src/modules/icon/fixtures/icon.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fixedWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "defaultValue": "'circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "iconType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"fa\" | \"skyux\"",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "'3x'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconVariantType",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { SkyIconVariantType } from '../types/icon-variant-type';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './icon.component.fixture.html',\n})\nexport class IconTestComponent {\n  public icon = 'circle';\n  public iconType: 'fa' | 'skyux';\n  public size = '3x';\n  public fixedWidth = false;\n  public variant: SkyIconVariantType;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-icon\n  [fixedWidth]=\"fixedWidth\"\n  [icon]=\"icon\"\n  [iconType]=\"iconType\"\n  [size]=\"size\"\n  [variant]=\"variant\"\n>\n</sky-icon>\n"
        },
        {
            "name": "KeyInfoDemoComponent",
            "id": "component-KeyInfoDemoComponent-9bb12f0f0a7e01e34ac17e3df578d887e07e01fa97958f49dab11c9c5a0a2c0c4cb554338f73c0ec28c82e32975e6448525b1a0d821dfd058de3a1e9008c1135",
            "file": "projects/indicators/documentation/code-examples/key-info/basic/key-info-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-key-info-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./key-info-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "layout",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-key-info-demo',\n  templateUrl: './key-info-demo.component.html',\n})\nexport class KeyInfoDemoComponent {\n  public layout: string = 'vertical';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-key-info [layout]=\"layout\">\n  <sky-key-info-value> 575 </sky-key-info-value>\n  <sky-key-info-label> New members </sky-key-info-label>\n</sky-key-info>\n"
        },
        {
            "name": "KeyInfoTestComponent",
            "id": "component-KeyInfoTestComponent-6244c7c7c6be85cc7b0799187f5e8778da8cbb0c78b3c8527a4ba006de69c3aba1d7d1980b221f6b04ff77874155effd6283b975f893c0ff0236eb3ef6676495",
            "file": "projects/indicators/src/modules/key-info/fixtures/key-info.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./key-info.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "layout",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './key-info.component.fixture.html',\n})\nexport class KeyInfoTestComponent {\n  public layout = 'vertical';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div>\n  <sky-key-info [layout]=\"layout\">\n    <sky-key-info-label> Label </sky-key-info-label>\n    <sky-key-info-value> Value </sky-key-info-value>\n  </sky-key-info>\n</div>\n"
        },
        {
            "name": "KeyInfoVisualComponent",
            "id": "component-KeyInfoVisualComponent-9c8d6b999906cab4ca1571f6261c5c0f48d5c81539db1628d2ce38afdf712c6e4066806229f2dc1d852b3c2989348afbd53d2a3ea19bcaf9e398b5549df4d5e2",
            "file": "projects/indicators-showcase/src/app/visual/key-info/key-info-visual.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-key-info-visual",
            "styleUrls": [
                "./key-info-visual.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./key-info-visual.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-key-info-visual',\n  templateUrl: './key-info-visual.component.html',\n  styleUrls: ['./key-info-visual.component.scss'],\n})\nexport class KeyInfoVisualComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "sky-key-info {\n  margin-right: 20px;\n}\n",
                    "styleUrl": "./key-info-visual.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div class=\"sky-key-info-visual\">\n  <sky-key-info layout=\"vertical\">\n    <sky-key-info-label> Label </sky-key-info-label>\n    <sky-key-info-value> Value </sky-key-info-value>\n  </sky-key-info>\n  <sky-key-info layout=\"horizontal\">\n    <sky-key-info-label> Label </sky-key-info-label>\n    <sky-key-info-value> Value </sky-key-info-value>\n  </sky-key-info>\n\n  <sky-key-info layout=\"vertical\">\n    <sky-key-info-label> Given this year </sky-key-info-label>\n    <sky-key-info-value class=\"sky-font-display-1\"> $1,000 </sky-key-info-value>\n  </sky-key-info>\n  <sky-key-info layout=\"horizontal\">\n    <sky-key-info-label> Given this year </sky-key-info-label>\n    <sky-key-info-value class=\"sky-font-display-1\"> $1,000 </sky-key-info-value>\n  </sky-key-info>\n\n  <sky-key-info layout=\"vertical\">\n    <sky-key-info-label> Given this year </sky-key-info-label>\n    <sky-key-info-value class=\"sky-font-display-3\"> $1,000 </sky-key-info-value>\n  </sky-key-info>\n  <sky-key-info layout=\"horizontal\">\n    <sky-key-info-label> Given this year </sky-key-info-label>\n    <sky-key-info-value class=\"sky-font-display-3\"> $1,000 </sky-key-info-value>\n  </sky-key-info>\n\n  <sky-key-info layout=\"vertical\">\n    <sky-key-info-label> Given this year </sky-key-info-label>\n    <sky-key-info-value class=\"sky-font-display-4\"> $1,000 </sky-key-info-value>\n  </sky-key-info>\n  <sky-key-info layout=\"horizontal\">\n    <sky-key-info-label> Given this year </sky-key-info-label>\n    <sky-key-info-value class=\"sky-font-display-4\"> $1,000 </sky-key-info-value>\n  </sky-key-info>\n</div>\n"
        },
        {
            "name": "LabelDemoComponent",
            "id": "component-LabelDemoComponent-d2fa48c564018bd7f6c932af0ff7fa68dbedaba769bffdcf24c20e2013885fc9424fdd3fc0be0759d9a794b39833504ab74a0089f6bc8ea0e41bc312be5a1e87",
            "file": "projects/indicators/documentation/code-examples/label/basic/label-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-label-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./label-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-label-demo',\n  templateUrl: './label-demo.component.html',\n})\nexport class LabelDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-label class=\"sky-margin-inline-default\" labelType=\"info\">\n  Info label\n</sky-label>\n\n<sky-label class=\"sky-margin-inline-default\" labelType=\"success\">\n  Success label\n</sky-label>\n\n<sky-label class=\"sky-margin-inline-default\" labelType=\"warning\">\n  Warning label\n</sky-label>\n\n<sky-label class=\"sky-margin-inline-default\" labelType=\"danger\">\n  Danger label\n</sky-label>\n"
        },
        {
            "name": "LabelTestComponent",
            "id": "component-LabelTestComponent-9ea035009db91f35076470e4c44088f0ceb38efb196e8a719f55a5b43daaf7d13ff2993470f964dec2366485cf6581de3c1980a921343c5ca1efe14dcf500d42",
            "file": "projects/indicators/src/modules/label/fixtures/label.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./label.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "labelType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyLabelType",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { SkyLabelType } from '../label-type';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './label.component.fixture.html',\n})\nexport class LabelTestComponent {\n  public labelType: SkyLabelType;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-label [labelType]=\"labelType\"> Test label </sky-label>\n"
        },
        {
            "name": "SkyAlertComponent",
            "id": "component-SkyAlertComponent-6faca7e68b344dd2dad0827d6c7e89b13435b0ad93c1cf636f9bdfa2cab911532ee9e3c20b748e2b5b41b9df0c8edb48816c8000381b29e1a4ff0eceddc34191",
            "file": "projects/indicators/src/modules/alert/alert.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-alert",
            "styleUrls": [
                "./alert.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./alert.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 666,
                            "end": 688,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 667,
                                "end": 674,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>&quot;warning&quot;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nSpecifies a style for the alert to determine the icon and background color.\nThe valid options are `danger`, `info`, `success`, and `warning`.\n",
                    "description": "<p>Specifies a style for the alert to determine the icon and background color.\nThe valid options are <code>danger</code>, <code>info</code>, <code>success</code>, and <code>warning</code>.</p>\n",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "closeable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 986,
                            "end": 1004,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 987,
                                "end": 994,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether to include a close button for users to dismiss the alert.\n",
                    "description": "<p>Indicates whether to include a close button for users to dismiss the alert.</p>\n",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1103,
                            "end": 1121,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1104,
                                "end": 1111,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether the alert is closed.\n",
                    "description": "<p>Indicates whether the alert is closed.</p>\n",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "closedChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when users close the alert.\n",
                    "description": "<p>Fires when users close the alert.</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_alertType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "alertBaseIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "alertTopIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateAlertIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { SkyIndicatorIconType } from '../shared/indicator-icon-type';\n\nimport { SkyIndicatorIconUtility } from '../shared/indicator-icon-utility';\n\nimport { SkyIconStackItem } from '../icon/icon-stack-item';\n\nconst ALERT_TYPE_DEFAULT = 'warning';\n\n@Component({\n  selector: 'sky-alert',\n  styleUrls: ['./alert.component.scss'],\n  templateUrl: './alert.component.html',\n})\nexport class SkyAlertComponent implements OnInit {\n  /**\n   * Specifies a style for the alert to determine the icon and background color.\n   * The valid options are `danger`, `info`, `success`, and `warning`.\n   * @default \"warning\"\n   */\n  @Input()\n  public set alertType(value: string) {\n    this._alertType = value;\n    this.updateAlertIcon();\n  }\n\n  public get alertType(): string {\n    return this._alertType || ALERT_TYPE_DEFAULT;\n  }\n\n  /**\n   * Indicates whether to include a close button for users to dismiss the alert.\n   * @default false\n   */\n  @Input()\n  public closeable: boolean;\n\n  /**\n   * Indicates whether the alert is closed.\n   * @default false\n   */\n  @Input()\n  public closed: boolean;\n\n  /**\n   * Fires when users close the alert.\n   */\n  @Output()\n  public closedChange = new EventEmitter<boolean>();\n\n  public alertBaseIcon: SkyIconStackItem;\n\n  public alertTopIcon: SkyIconStackItem;\n\n  private _alertType: string;\n\n  public ngOnInit(): void {\n    this.updateAlertIcon();\n  }\n\n  public close(): void {\n    this.closed = true;\n    this.closedChange.emit(true);\n  }\n\n  private updateAlertIcon(): void {\n    const indicatorIcon = SkyIndicatorIconUtility.getIconsForType(\n      this.alertType as SkyIndicatorIconType\n    );\n\n    this.alertBaseIcon = indicatorIcon.modernThemeBaseIcon;\n    this.alertTopIcon = indicatorIcon.modernThemeTopIcon;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/variables';\n@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/_compat/mixins';\n\n.sky-alert {\n  padding: 0 $sky-padding;\n  margin-bottom: $sky-margin-double;\n  border-left: solid 30px;\n  color: $sky-text-color-default;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n\n  .sky-alert-content {\n    padding-top: $sky-padding;\n    padding-bottom: $sky-padding;\n    width: 100%;\n\n    ::ng-deep a {\n      color: change-color($sky-text-color-default, $alpha: 0.8);\n      text-decoration: underline;\n\n      &:hover {\n        color: $sky-text-color-default;\n      }\n    }\n  }\n\n  button {\n    margin-left: auto;\n    width: 32px;\n    height: 32px;\n  }\n\n  &.sky-alert-info {\n    background-color: $sky-background-color-info;\n    border-color: $sky-highlight-color-info;\n\n    &:before {\n      content: '\\f06a';\n      font-family: FontAwesome;\n      margin-left: -31px;\n      margin-right: 20px;\n      color: $sky-color-white;\n    }\n  }\n\n  &.sky-alert-success {\n    background-color: $sky-background-color-success;\n    border-color: $sky-highlight-color-success;\n\n    &:before {\n      content: '\\f00c';\n      font-family: FontAwesome;\n      margin-left: -32px;\n      margin-right: 19px;\n      color: $sky-color-white;\n    }\n  }\n\n  &.sky-alert-warning {\n    background-color: $sky-background-color-warning;\n    border-color: $sky-highlight-color-warning;\n\n    &:before {\n      content: '\\f071';\n      font-family: FontAwesome;\n      margin-left: -32px;\n      margin-right: 19px;\n      color: $sky-color-white;\n    }\n  }\n\n  &.sky-alert-danger {\n    background-color: $sky-background-color-danger;\n    border-color: $sky-highlight-color-danger;\n\n    &:before {\n      content: '\\f071';\n      font-family: FontAwesome;\n      margin-left: -32px;\n      margin-right: 19px;\n      color: $sky-color-white;\n    }\n  }\n}\n\n.sky-alert-close {\n  cursor: pointer;\n  font-weight: bold;\n  line-height: 1;\n  margin: 0;\n  padding: 0;\n  color: $sky-text-color-default;\n  opacity: 0.8;\n  border: none;\n  background-color: transparent;\n  display: none;\n\n  &:hover {\n    opacity: 1;\n  }\n}\n\n.sky-alert-closeable {\n  .sky-alert-close {\n    display: block;\n  }\n}\n\n/* Theming */\n\n.sky-alert-close-icon-theme-modern,\n.sky-alert-icon-theme-modern {\n  display: none;\n}\n\n@include sky-theme-modern {\n  .sky-alert {\n    border-left-width: 7px;\n\n    .sky-alert-content {\n      padding: $sky-theme-modern-padding-even-md;\n    }\n\n    &.sky-alert-info {\n      background-color: $sky-background-color-info-light;\n    }\n  }\n\n  .sky-alert-info,\n  .sky-alert-success,\n  .sky-alert-warning,\n  .sky-alert-danger {\n    &:before {\n      display: none;\n    }\n  }\n\n  .sky-alert-info .sky-alert-icon-theme-modern {\n    color: $sky-highlight-color-info;\n  }\n\n  .sky-alert-success .sky-alert-icon-theme-modern {\n    color: $sky-highlight-color-success;\n  }\n\n  .sky-alert-warning .sky-alert-icon-theme-modern {\n    color: $sky-highlight-color-warning;\n  }\n\n  .sky-alert-danger .sky-alert-icon-theme-modern {\n    color: $sky-highlight-color-danger;\n  }\n\n  .sky-alert-icon-theme-modern {\n    display: block;\n  }\n\n  .sky-alert-close-icon-theme-default {\n    display: none;\n  }\n\n  .sky-alert-close-icon-theme-modern {\n    display: inline;\n  }\n}\n",
                    "styleUrl": "./alert.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "alertType": {
                    "name": "alertType",
                    "setSignature": {
                        "name": "alertType",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "rawdescription": "\n\nSpecifies a style for the alert to determine the icon and background color.\nThe valid options are `danger`, `info`, `success`, and `warning`.\n",
                        "description": "<p>Specifies a style for the alert to determine the icon and background color.\nThe valid options are <code>danger</code>, <code>info</code>, <code>success</code>, and <code>warning</code>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "alertType",
                        "type": "string",
                        "returnType": "string",
                        "line": 28
                    }
                }
            },
            "templateData": "<div\n  class=\"sky-alert\"\n  [skyThemeClass]=\"{\n    'sky-rounded-corners': 'default',\n    'sky-box sky-elevation-1': 'modern'\n  }\"\n  role=\"alert\"\n  [hidden]=\"closed\"\n  [ngClass]=\"{\n    'sky-alert-info': alertType === 'info',\n    'sky-alert-success': alertType === 'success',\n    'sky-alert-warning': alertType === 'warning',\n    'sky-alert-danger': alertType === 'danger',\n    'sky-alert-closeable': closeable\n  }\"\n>\n  <div aria-hidden=\"true\" class=\"sky-alert-icon-theme-modern\">\n    <sky-icon-stack [baseIcon]=\"alertBaseIcon\" [topIcon]=\"alertTopIcon\">\n    </sky-icon-stack>\n  </div>\n  <div class=\"sky-alert-content\">\n    <ng-content></ng-content>\n  </div>\n  <button\n    class=\"sky-alert-close\"\n    type=\"button\"\n    [attr.aria-label]=\"'skyux_alert_close' | skyLibResources\"\n    [hidden]=\"!closeable\"\n    (click)=\"close()\"\n  >\n    <span aria-hidden=\"true\">\n      <sky-icon class=\"sky-alert-close-icon-theme-default\" icon=\"close\">\n      </sky-icon>\n      <sky-icon\n        class=\"sky-alert-close-icon-theme-modern\"\n        icon=\"close\"\n        iconType=\"skyux\"\n        size=\"2x\"\n      >\n      </sky-icon>\n    </span>\n  </button>\n</div>\n"
        },
        {
            "name": "SkyChevronComponent",
            "id": "component-SkyChevronComponent-8ed94e82488b859b30f476f640abf7f4cf3154c57469a370c031c3b943526f59358282b15ce4fba04b9d7ae9fd68927747623f176d13d4a142544b1d569ee34a",
            "file": "projects/indicators/src/modules/chevron/chevron.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-chevron",
            "styleUrls": [
                "./chevron.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chevron.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "direction",
                    "defaultValue": "'up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "directionChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "chevronClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'sky-chevron',\n  styleUrls: ['./chevron.component.scss'],\n  templateUrl: './chevron.component.html',\n})\nexport class SkyChevronComponent {\n  @Output()\n  public directionChange = new EventEmitter<string>();\n\n  @Input()\n  public direction = 'up';\n\n  @Input()\n  public disabled = false;\n\n  public chevronClick(event: Event): void {\n    event.stopPropagation();\n    this.direction = this.direction === 'up' ? 'down' : 'up';\n    this.directionChange.emit(this.direction);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/variables';\n@import '~@skyux/theme/scss/_compat/mixins';\n\nbutton {\n  background: lightblue;\n}\n\n.sky-chevron {\n  border: none;\n  background-color: transparent;\n  flex-shrink: 0;\n  height: $sky-context-menu-size;\n  margin: 0;\n  overflow: hidden;\n  width: $sky-context-menu-size;\n  cursor: pointer;\n  position: relative;\n  vertical-align: top;\n\n  &:hover .sky-chevron-part {\n    border-color: darken($sky-text-color-icon-borderless, 20%);\n  }\n}\n\n.sky-chevron-part {\n  border-color: $sky-text-color-icon-borderless;\n  border-style: solid;\n  border-width: 3px 0 0 0;\n  display: inline-block;\n  height: 10px;\n  position: absolute;\n  top: 10px;\n  transition: transform $sky-transition-time-medium,\n    left $sky-transition-time-medium;\n  vertical-align: top;\n  width: 10px;\n}\n\n.sky-chevron-up {\n  .sky-chevron-left {\n    left: 7px;\n    transform: rotate(-45deg);\n  }\n\n  .sky-chevron-right {\n    left: 7px;\n    transform: rotate(45deg);\n  }\n}\n\n.sky-chevron-down {\n  .sky-chevron-left {\n    left: 2px;\n    transform: rotate(45deg);\n  }\n\n  .sky-chevron-right {\n    left: 12px;\n    transform: rotate(-45deg);\n  }\n}\n\n@include sky-theme-modern {\n  .sky-chevron {\n    height: 26px;\n    width: 26px;\n  }\n\n  .sky-chevron-part {\n    background: $sky-theme-modern-font-deemphasized-color;\n    border: none;\n    height: 2px;\n    width: 11px;\n    top: 13px;\n  }\n\n  .chevron-glyph-container {\n    transform: scale(0.68);\n    display: inline-block;\n    position: absolute;\n    top: 3.5px;\n    left: 4px;\n  }\n\n  .sky-chevron-left {\n    border-radius: 1px 0 0 1px;\n  }\n\n  .sky-chevron-right {\n    border-radius: 0 1px 1px 0;\n  }\n\n  .sky-chevron-left {\n    left: 4px;\n  }\n\n  .sky-chevron-right {\n    left: 10.5px;\n  }\n}\n",
                    "styleUrl": "./chevron.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"sky-chevron\"\n  type=\"button\"\n  [attr.aria-label]=\"\n    (direction === 'down' ? 'skyux_chevron_expand' : 'skyux_chevron_collapse')\n      | skyLibResources\n  \"\n  [disabled]=\"disabled\"\n  [ngClass]=\"['sky-chevron-' + direction]\"\n  [skyThemeClass]=\"{\n    'sky-btn sky-btn-icon-borderless': 'modern'\n  }\"\n  (click)=\"chevronClick($event)\"\n>\n  <ng-container *skyThemeIf=\"'default'\">\n    <ng-container *ngTemplateOutlet=\"icon\"></ng-container>\n  </ng-container>\n  <ng-container *skyThemeIf=\"'modern'\">\n    <span class=\"chevron-glyph-container\">\n      <ng-container *ngTemplateOutlet=\"icon\"></ng-container>\n    </span>\n  </ng-container>\n</button>\n\n<ng-template #icon>\n  <i aria-hidden=\"true\" class=\"sky-chevron-part sky-chevron-left\"> </i>\n  <i aria-hidden=\"true\" class=\"sky-chevron-part sky-chevron-right\"> </i>\n</ng-template>\n"
        },
        {
            "name": "SkyChevronDemoComponent",
            "id": "component-SkyChevronDemoComponent-b8c79ec6f2fa98d4c12c42ee784487dbe557e041a5ffcab2098f60d3432ac68197f94e5d38f0b30a8ee052ef274e9da9bfd5f1fe7320df53abaf220256723680",
            "file": "projects/indicators-showcase/src/app/visual/chevron/chevron-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-chevron-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./chevron-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-chevron-demo',\n  templateUrl: './chevron-demo.component.html',\n})\nexport class SkyChevronDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div id=\"sky-chevron-demo\">\n  <sky-chevron></sky-chevron>\n  <sky-chevron direction=\"up\"> </sky-chevron>\n  <sky-chevron direction=\"down\"> </sky-chevron>\n</div>\n"
        },
        {
            "name": "SkyHelpInlineComponent",
            "id": "component-SkyHelpInlineComponent-808e0e2d55b109661b00a24aa561dfcc1e6fbd896e67bfd888d30906c5c2e399e3b6b543a2c94bd03368557461eabaa61350b1ef700b8564c7fe27f0dc24fc9d",
            "file": "projects/indicators/src/modules/help-inline/help-inline.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-help-inline",
            "styleUrls": [
                "./help-inline.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./help-inline.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "actionClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when the user clicks the help inline button.\n",
                    "description": "<p>Fires when the user clicks the help inline button.</p>\n",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'sky-help-inline',\n  templateUrl: './help-inline.component.html',\n  styleUrls: ['./help-inline.component.scss'],\n})\nexport class SkyHelpInlineComponent {\n  /**\n   * Fires when the user clicks the help inline button.\n   */\n  @Output()\n  public actionClick = new EventEmitter<any>();\n\n  public onClick(): void {\n    this.actionClick.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/_compat/mixins';\n\n.sky-help-inline {\n  color: $sky-text-color-action-primary;\n  font-size: $sky-font-size-base;\n  background-color: transparent;\n  border: none;\n  display: inline-block;\n\n  &:hover {\n    color: darken($sky-text-color-action-primary, 10%);\n    transition: color $sky-transition-time-short;\n    cursor: pointer;\n  }\n}\n\n@include sky-theme-modern {\n  .sky-help-inline {\n    ::ng-deep .fa-stack-2x {\n      font-size: 16px;\n    }\n\n    ::ng-deep .fa-stack-1x {\n      font-size: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./help-inline.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"sky-help-inline\"\n  type=\"button\"\n  [attr.aria-label]=\"'skyux_help_inline_button_title' | skyLibResources\"\n  (click)=\"onClick()\"\n>\n  <sky-icon *skyThemeIf=\"'default'\" icon=\"info-circle\"> </sky-icon>\n  <sky-icon-stack\n    *skyThemeIf=\"'modern'\"\n    size=\"xs\"\n    [baseIcon]=\"{\n      icon: 'circle-solid',\n      iconType: 'skyux'\n    }\"\n    [topIcon]=\"{\n      icon: 'help-i',\n      iconType: 'skyux'\n    }\"\n  >\n  </sky-icon-stack>\n</button>\n"
        },
        {
            "name": "SkyHelpInlineDemoComponent",
            "id": "component-SkyHelpInlineDemoComponent-654fe6db0bb118c2d3849c613129221838ec8081c2d8f45877878ac4c5bf1dc36350f83f8219816d2bba9fd18c271f20519903e50056a368565d14b988ad17d3",
            "file": "projects/indicators-showcase/src/app/visual/help-inline/help-inline-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-help-inline-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./help-inline-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonIsClicked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onActionClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-help-inline-demo',\n  templateUrl: './help-inline-demo.component.html',\n})\nexport class SkyHelpInlineDemoComponent {\n  public buttonIsClicked = false;\n\n  public onActionClick(): void {\n    this.buttonIsClicked = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div class=\"sky-help-inline-demo\">\n  <h2>\n    Giving\n    <sky-help-inline (actionClick)=\"onActionClick()\"> </sky-help-inline>\n  </h2>\n</div>\n"
        },
        {
            "name": "SkyIconComponent",
            "id": "component-SkyIconComponent-4db23c08328dfe566cdb848da64856728c6a97d0818f571cca5612098091d601866d1151c67b36d43648c66bd9a9acb10e876bdf990ee741e6dc57b92fb4e490",
            "file": "projects/indicators/src/modules/icon/icon.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-icon",
            "styleUrls": [
                "./icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fixedWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIndicates whether the icon has a fixed width.\n",
                    "description": "<p>Indicates whether the icon has a fixed width.</p>\n",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 556,
                            "end": 569,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 557,
                                "end": 565,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nSpecifies the name of\n[the Font Awesome 4.7 icon](https://fontawesome.com/v4.7/icons/) to\ndisplay. Do not specify the `fa fa-` classes.\n",
                    "description": "<p>Specifies the name of\n<a href=\"https://fontawesome.com/v4.7/icons/\">the Font Awesome 4.7 icon</a> to\ndisplay. Do not specify the <code>fa fa-</code> classes.</p>\n",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconType",
                    "defaultValue": "'fa'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the type of icon to display. Specifying `fa` will display a Font Awesome icon,\nwhile specifying `skyux` will display an icon from the custom SKY UX icon font. Note that\nthe custom SKY UX icon font is currently in beta.\n",
                    "description": "<p>Specifies the type of icon to display. Specifying <code>fa</code> will display a Font Awesome icon,\nwhile specifying <code>skyux</code> will display an icon from the custom SKY UX icon font. Note that\nthe custom SKY UX icon font is currently in beta.</p>\n",
                    "line": 29,
                    "type": "SkyIconType",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the size of the icon using\n[Font Awesome sizes](https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons).\n",
                    "description": "<p>Specifies the size of the icon using\n<a href=\"https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons\">Font Awesome sizes</a>.</p>\n",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the icon variant (`line` or `solid`). If the variant doesn't exist for the\nspecified icon, the normal icon is displayed.\n",
                    "description": "<p>Specifies the icon variant (<code>line</code> or <code>solid</code>). If the variant doesn&#39;t exist for the\nspecified icon, the normal icon is displayed.</p>\n",
                    "line": 49,
                    "type": "SkyIconVariantType",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { SkyIconType } from './types/icon-type';\n\nimport { SkyIconVariantType } from './types/icon-variant-type';\n\n@Component({\n  selector: 'sky-icon',\n  templateUrl: './icon.component.html',\n  styleUrls: ['./icon.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkyIconComponent {\n  /**\n   * Specifies the name of\n   * [the Font Awesome 4.7 icon](https://fontawesome.com/v4.7/icons/) to\n   * display. Do not specify the `fa fa-` classes.\n   * @required\n   */\n  @Input()\n  public icon: string;\n\n  /**\n   * Specifies the type of icon to display. Specifying `fa` will display a Font Awesome icon,\n   * while specifying `skyux` will display an icon from the custom SKY UX icon font. Note that\n   * the custom SKY UX icon font is currently in beta.\n   */\n  @Input()\n  public iconType: SkyIconType = 'fa';\n\n  /**\n   * Specifies the size of the icon using\n   * [Font Awesome sizes](https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons).\n   */\n  @Input()\n  public size: string;\n\n  /**\n   * Indicates whether the icon has a fixed width.\n   */\n  @Input()\n  public fixedWidth: boolean;\n\n  /**\n   * Specifies the icon variant (`line` or `solid`). If the variant doesn't exist for the\n   * specified icon, the normal icon is displayed.\n   */\n  @Input()\n  public variant: SkyIconVariantType;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: inline-block;\n}\n\ni {\n  display: inherit;\n}\n",
                    "styleUrl": "./icon.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<i\n  *ngIf=\"icon\"\n  aria-hidden=\"true\"\n  class=\"sky-icon\"\n  [ngClass]=\"icon | skyIconClassList: iconType:size:fixedWidth:variant\"\n>\n</i>\n"
        },
        {
            "name": "SkyIconDemoComponent",
            "id": "component-SkyIconDemoComponent-f243e608eb0035d9f9d45ba8402ffe55bc6ad10e4ef6e57b4fb696917b8db9c416be685f52882e853ade7d42e931219f8d2e779351849fd70db659e2d92025ee",
            "file": "projects/indicators-showcase/src/app/visual/icon/icon-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-icon-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-icon-demo',\n  templateUrl: './icon-demo.component.html',\n})\nexport class SkyIconDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"sky-icon-demo\">\n  <sky-icon icon=\"bars\" size=\"lg\"> </sky-icon>\n  <sky-icon icon=\"chevron-down\" size=\"sm\"> </sky-icon>\n  <sky-icon icon=\"chevron-up\" size=\"5x\"> </sky-icon>\n  <sky-icon icon=\"cog\" size=\"2x\"> </sky-icon>\n  <sky-icon icon=\"comment\" size=\"xs\"> </sky-icon>\n  <sky-icon icon=\"database\" size=\"3x\"> </sky-icon>\n  <sky-icon fixedWidth=\"true\" icon=\"spinner\" size=\"3x\"> </sky-icon>\n  <sky-icon icon=\"trash\" size=\"sm\"> </sky-icon>\n  <sky-icon icon=\"users\" size=\"4x\"> </sky-icon>\n  <sky-icon icon=\"user\" size=\"5x\"> </sky-icon>\n  <sky-icon icon=\"sort\" iconType=\"skyux\" size=\"5x\"> </sky-icon>\n</div>\n<div class=\"sky-icon-demo-variant\">\n  <div>\n    <sky-icon icon=\"house\" iconType=\"skyux\"> </sky-icon>\n    Variant not specified\n  </div>\n  <div>\n    <sky-icon icon=\"house\" iconType=\"skyux\" variant=\"line\"> </sky-icon>\n    Line variant specified\n  </div>\n  <div>\n    <sky-icon icon=\"house\" iconType=\"skyux\" variant=\"solid\"> </sky-icon>\n    Solid variant specified\n  </div>\n</div>\n"
        },
        {
            "name": "SkyIconStackComponent",
            "id": "component-SkyIconStackComponent-5825da601866a4cd7481a13bf06909a687ab37f136c081e6b231e6a79dbaefdd0ca030beee83c4335330a13bd5deee915b89b60898d7519033ddf3f8cca52fae",
            "file": "projects/indicators/src/modules/icon/icon-stack.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-icon-stack",
            "styleUrls": [
                "./icon-stack.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-stack.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "baseIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon to display at the bottom of the stack.\n",
                    "description": "<p>The icon to display at the bottom of the stack.</p>\n",
                    "line": 22,
                    "type": "SkyIconStackItem",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the size of the icon using\n[Font Awesome sizes](https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons).\n",
                    "description": "<p>Specifies the size of the icon using\n<a href=\"https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons\">Font Awesome sizes</a>.</p>\n",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "topIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe icon to display at the top of the stack.\n",
                    "description": "<p>The icon to display at the top of the stack.</p>\n",
                    "line": 28,
                    "type": "SkyIconStackItem",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { SkyIconStackItem } from './icon-stack-item';\n\n@Component({\n  selector: 'sky-icon-stack',\n  templateUrl: './icon-stack.component.html',\n  styleUrls: ['./icon-stack.component.scss'],\n})\nexport class SkyIconStackComponent {\n  /**\n   * Specifies the size of the icon using\n   * [Font Awesome sizes](https://fontawesome.com/how-to-use/on-the-web/styling/sizing-icons).\n   */\n  @Input()\n  public size: string;\n\n  /**\n   * The icon to display at the bottom of the stack.\n   */\n  @Input()\n  public baseIcon: SkyIconStackItem;\n\n  /**\n   * The icon to display at the top of the stack.\n   */\n  @Input()\n  public topIcon: SkyIconStackItem;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/variables';\n\n:host {\n  display: inline-block;\n  vertical-align: bottom;\n}\n\n.sky-icon-stack-size-xs {\n  &.fa-stack {\n    width: 1.25em;\n    height: 1.25em;\n    line-height: 1.25em;\n  }\n\n  .fa-stack-2x {\n    font-size: 1.25em;\n  }\n\n  .fa-stack-1x {\n    font-size: 0.625em;\n  }\n}\n\n// Temporary overrides until the proportions of stackable SKY UX icons have been corrected.\n.fa-stack-1x {\n  &.sky-i-check:before {\n    position: relative;\n    top: 1px;\n  }\n\n  &.sky-i-exclamation:before {\n    position: relative;\n    top: 2px;\n    left: -0.5px;\n  }\n}\n\n@include sky-theme-modern-dark {\n  .sky-icon-inverse {\n    color: $sky-theme-modern-mode-dark-background-color-page-default;\n  }\n}\n",
                    "styleUrl": "./icon-stack.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<span\n  aria-hidden=\"true\"\n  class=\"sky-icon-stack fa-stack\"\n  [ngClass]=\"size ? 'fa-' + size + ' sky-icon-stack-size-' + size : ''\"\n>\n  <i\n    *ngIf=\"baseIcon\"\n    class=\"sky-icon fa-stack-2x\"\n    [ngClass]=\"baseIcon.icon | skyIconClassList: baseIcon.iconType\"\n  ></i>\n  <i\n    *ngIf=\"topIcon\"\n    class=\"sky-icon fa-stack-1x fa-inverse sky-icon-inverse\"\n    [ngClass]=\"topIcon.icon | skyIconClassList: topIcon.iconType\"\n  ></i>\n</span>\n"
        },
        {
            "name": "SkyIconStackDemoComponent",
            "id": "component-SkyIconStackDemoComponent-f9423775568b31e2160ff2811a2b23c775c4679d4d8b56a4b303747c5303fed271c5450ed3265e56fa680ddd462ac7250702a384fdfa688a64cef548f9b13058",
            "file": "projects/indicators-showcase/src/app/visual/icon-stack/icon-stack-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-icon-stack-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./icon-stack-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-icon-stack-demo',\n  templateUrl: './icon-stack-demo.component.html',\n})\nexport class SkyIconStackDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div class=\"sky-icon-stack-demo\">\n  <sky-icon-stack\n    [baseIcon]=\"{\n      icon: 'circle-solid',\n      iconType: 'skyux'\n    }\"\n    [topIcon]=\"{\n      icon: 'help-i',\n      iconType: 'skyux'\n    }\"\n  >\n  </sky-icon-stack>\n  <sky-icon-stack\n    size=\"xs\"\n    [baseIcon]=\"{\n      icon: 'circle-solid',\n      iconType: 'skyux'\n    }\"\n    [topIcon]=\"{\n      icon: 'help-i',\n      iconType: 'skyux'\n    }\"\n  >\n  </sky-icon-stack>\n</div>\n"
        },
        {
            "name": "SkyKeyInfoComponent",
            "id": "component-SkyKeyInfoComponent-8d50f228ab327c33d8a74a978323fabb08494f504fe2b1d2b54cdbaff15fb240c5cb7ce319b35864c0274fe7891627b9c195c9f41146d20d14568fbaa2f8aaa5",
            "file": "projects/indicators/src/modules/key-info/key-info.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-key-info",
            "styleUrls": [
                "./key-info.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./key-info.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "layout",
                    "defaultValue": "'vertical'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 392,
                            "end": 415,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 393,
                                "end": 400,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>&quot;vertical&quot;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nSpecifies whether to display key info in a `vertical` layout with the label under the\nvalue or in a `horizontal` layout with the label beside the value.\n",
                    "description": "<p>Specifies whether to display key info in a <code>vertical</code> layout with the label under the\nvalue or in a <code>horizontal</code> layout with the label beside the value.</p>\n",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'sky-key-info',\n  templateUrl: './key-info.component.html',\n  styleUrls: ['./key-info.component.scss'],\n})\nexport class SkyKeyInfoComponent {\n  /**\n   * Specifies whether to display key info in a `vertical` layout with the label under the\n   * value or in a `horizontal` layout with the label beside the value.\n   * @default \"vertical\"\n   */\n  @Input()\n  public layout = 'vertical';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/variables';\n@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/_compat/mixins';\n\n.sky-key-info {\n  display: inline-block;\n\n  &.sky-key-info-horizontal {\n    .sky-key-info-value,\n    .sky-key-info-label {\n      display: inline-block;\n    }\n\n    .sky-key-info-label {\n      padding: 0 0 0 $sky-space-xs;\n    }\n  }\n}\n\n@include sky-theme-modern {\n  .sky-key-info {\n    &.sky-key-info-horizontal {\n      .sky-key-info-label {\n        padding: 0 0 0 $sky-theme-modern-space-xs;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./key-info.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div\n  class=\"sky-key-info\"\n  [ngClass]=\"{\n    'sky-key-info-horizontal': layout === 'horizontal'\n  }\"\n>\n  <div class=\"sky-key-info-value sky-headline\">\n    <ng-content select=\"sky-key-info-value\"> </ng-content>\n  </div>\n  <div class=\"sky-key-info-label sky-field-label sky-font-data-label\">\n    <ng-content select=\"sky-key-info-label\"> </ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "SkyKeyInfoLabelComponent",
            "id": "component-SkyKeyInfoLabelComponent-48b0dda97aab46887803e82d36077c954108734c88f2e3a52152ada021cdaaa163c6de80ff98337cb6cc7dead75655e1eb16f7469f3c493361dff0f6631bb31b",
            "file": "projects/indicators/src/modules/key-info/key-info-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-key-info-label",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Specifies a label to display in smaller, plain text under or beside the value.</p>\n",
            "rawdescription": "\n\nSpecifies a label to display in smaller, plain text under or beside the value.\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n/**\n * Specifies a label to display in smaller, plain text under or beside the value.\n * @required\n */\n@Component({\n  selector: 'sky-key-info-label',\n  template: '<ng-content></ng-content>',\n})\nexport class SkyKeyInfoLabelComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SkyKeyInfoValueComponent",
            "id": "component-SkyKeyInfoValueComponent-12b3e87fd15f104737c2de92f4a29dab2131c9f1ef139918aa6548bc8bbfab19a8a441d2bfc4a018b7ad7cbf141ace1793d940b97aa033bf266e884886d8fc57",
            "file": "projects/indicators/src/modules/key-info/key-info-value.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-key-info-value",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Specifies a value to display in larger, bold text.</p>\n",
            "rawdescription": "\n\nSpecifies a value to display in larger, bold text.\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n/**\n * Specifies a value to display in larger, bold text.\n * @required\n */\n@Component({\n  selector: 'sky-key-info-value',\n  template: '<ng-content></ng-content>',\n})\nexport class SkyKeyInfoValueComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "SkyLabelComponent",
            "id": "component-SkyLabelComponent-6f442b5aafc1fe9a9867bd0397bce382c4a8238bee1a70afffc0af4eb6b8647309b06787c4cc373d508cfa76e85f4b2ac5e1024a59d56c117d3d992f068bbbf9",
            "file": "projects/indicators/src/modules/label/label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-label",
            "styleUrls": [
                "./label.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "labelType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 437,
                            "end": 450,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 438,
                                "end": 446,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nThe type of label to display.\n",
                    "description": "<p>The type of label to display.</p>\n",
                    "line": 20,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_labelType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyLabelType",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "baseIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "topIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "updateIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\nimport { SkyIndicatorIconUtility } from '../shared/indicator-icon-utility';\n\nimport { SkyIconStackItem } from '../icon/icon-stack-item';\n\nimport { SkyLabelType } from './label-type';\n\n@Component({\n  selector: 'sky-label',\n  templateUrl: './label.component.html',\n  styleUrls: ['./label.component.scss'],\n})\nexport class SkyLabelComponent {\n  /**\n   * The type of label to display.\n   * @required\n   */\n  @Input()\n  public set labelType(value: SkyLabelType) {\n    this._labelType = value;\n    this.updateIcon();\n  }\n\n  public get labelType(): SkyLabelType {\n    return this._labelType || 'info';\n  }\n\n  public baseIcon: SkyIconStackItem;\n\n  public icon: string;\n\n  public topIcon: SkyIconStackItem;\n\n  private _labelType: SkyLabelType;\n\n  private updateIcon(): void {\n    const indicatorIcon = SkyIndicatorIconUtility.getIconsForType(\n      this.labelType\n    );\n\n    this.icon = indicatorIcon.defaultThemeIcon;\n    this.baseIcon = indicatorIcon.modernThemeBaseIcon;\n    this.topIcon = indicatorIcon.modernThemeTopIcon;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/_compat/mixins';\n\n.sky-label {\n  color: $sky-text-color-default;\n  display: inline;\n  border-radius: 10rem;\n  font-weight: 400;\n  line-height: 2.2;\n  margin: 0 3px;\n  padding: 0.3em 0.6em 0.3em 0.6em;\n  white-space: nowrap;\n}\n\n.sky-label-success {\n  background-color: $sky-background-color-success;\n}\n\n.sky-label-info {\n  background-color: $sky-background-color-info;\n}\n\n.sky-label-warning {\n  background-color: $sky-background-color-warning;\n}\n\n.sky-label-danger {\n  background-color: $sky-background-color-danger;\n}\n\n.sky-label-text {\n  display: inline-block;\n  padding-left: $sky-padding-half;\n}\n\n.sky-label-icon-theme-modern {\n  display: none;\n}\n\n@include sky-theme-modern {\n  .sky-label {\n    align-items: center;\n    display: inline-flex;\n    line-height: 1;\n\n    &.sky-label-info {\n      background-color: $sky-background-color-info-light;\n    }\n\n    &.sky-label-info,\n    &.sky-label-success {\n      padding: 4px 15px 4px 6px;\n    }\n\n    &.sky-label-warning,\n    &.sky-label-danger {\n      padding: 4px 15px 4px 9px;\n    }\n  }\n\n  .sky-label-icon-theme-default {\n    display: none;\n  }\n\n  .sky-label-icon-theme-modern {\n    display: block;\n  }\n\n  .sky-label-info .sky-label-icon-theme-modern {\n    color: $sky-highlight-color-info;\n  }\n\n  .sky-label-success .sky-label-icon-theme-modern {\n    color: $sky-highlight-color-success;\n  }\n\n  .sky-label-warning .sky-label-icon-theme-modern {\n    color: $sky-highlight-color-warning;\n  }\n\n  .sky-label-danger .sky-label-icon-theme-modern {\n    color: $sky-highlight-color-danger;\n  }\n}\n",
                    "styleUrl": "./label.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "labelType": {
                    "name": "labelType",
                    "setSignature": {
                        "name": "labelType",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "SkyLabelType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "rawdescription": "\n\nThe type of label to display.\n",
                        "description": "<p>The type of label to display.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "SkyLabelType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "labelType",
                        "type": "",
                        "returnType": "SkyLabelType",
                        "line": 25
                    }
                }
            },
            "templateData": "<span class=\"sky-label\" [ngClass]=\"'sky-label-' + labelType\">\n  <span class=\"sky-label-icon-theme-default\">\n    <sky-icon [icon]=\"icon\"></sky-icon>\n  </span>\n  <span class=\"sky-label-icon-theme-modern\">\n    <sky-icon-stack size=\"xs\" [baseIcon]=\"baseIcon\" [topIcon]=\"topIcon\">\n    </sky-icon-stack>\n  </span>\n  <span class=\"sky-label-text\">\n    <ng-content></ng-content>\n  </span>\n</span>\n"
        },
        {
            "name": "SkyLabelDemoComponent",
            "id": "component-SkyLabelDemoComponent-f2a8af645595810818e67a918430e1f90a1e2f7ecf1bbad7508b97f0ff5cb15b33dc9ee18399611e6bb8ac96044e06e6c88d41403163ee120363aa660567d801",
            "file": "projects/indicators-showcase/src/app/visual/label/label-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-label-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./label-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-label-demo',\n  templateUrl: './label-demo.component.html',\n})\nexport class SkyLabelDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div class=\"sky-label-demo\">\n  <sky-label labelType=\"info\"> Info label </sky-label>\n  <sky-label labelType=\"success\"> Success label </sky-label>\n  <sky-label labelType=\"warning\"> Warning label </sky-label>\n  <sky-label labelType=\"danger\"> Danger label </sky-label>\n</div>\n"
        },
        {
            "name": "SkyStatusIndicatorComponent",
            "id": "component-SkyStatusIndicatorComponent-c27c06256360d234ae0e8c67ca4b2dc7baaa3815fb3dcd1bbe3f9b3e63886f4d879be6cba612dcf52b68b2d9c308c18094666a12006c423a7110c94fb1e3b6d4",
            "file": "projects/indicators/src/modules/status-indicator/status-indicator.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-status-indicator",
            "styleUrls": [
                "./status-indicator.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./status-indicator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "customDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the text to be read by screen readers for users who cannot see\nthe indicator icon when `descriptionType` is `custom`.\n",
                    "description": "<p>Specifies the text to be read by screen readers for users who cannot see\nthe indicator icon when <code>descriptionType</code> is <code>custom</code>.</p>\n",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "descriptionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1417,
                            "end": 1430,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1418,
                                "end": 1426,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nSpecifies the predefined text to be read by screen readers for users\nwho cannot see the indicator icon. The valid options are `none`, `custom`,\n`error`, `warning`, `completed`, and `important-info`.\n",
                    "description": "<p>Specifies the predefined text to be read by screen readers for users\nwho cannot see the indicator icon. The valid options are <code>none</code>, <code>custom</code>,\n<code>error</code>, <code>warning</code>, <code>completed</code>, and <code>important-info</code>.</p>\n",
                    "line": 49,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "indicatorType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 921,
                            "end": 943,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 922,
                                "end": 929,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>&quot;warning&quot;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nSpecifies a style for the status indicator to determine the icon.\nThe valid options are `danger`, `info`, `success`, and `warning`.\n",
                    "description": "<p>Specifies a style for the status indicator to determine the icon.\nThe valid options are <code>danger</code>, <code>info</code>, <code>success</code>, and <code>warning</code>.</p>\n",
                    "line": 33,
                    "type": "",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_customDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_descriptionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIndicatorDescriptionType",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_indicatorType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIndicatorIconType",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "baseIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "descriptionComputed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "topIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIconStackItem",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "updateDescriptionComputed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "updateIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n} from '@angular/core';\n\nimport { SkyLibResourcesService } from '@skyux/i18n';\n\nimport { SkyIndicatorDescriptionType } from '../shared/indicator-description-type';\n\nimport { SkyIndicatorIconType } from '../shared/indicator-icon-type';\n\nimport { SkyIndicatorIconUtility } from '../shared/indicator-icon-utility';\n\nimport { SkyIconStackItem } from '../icon/icon-stack-item';\n\nconst INDICATOR_TYPE_DEFAULT: SkyIndicatorIconType = 'warning';\n\n@Component({\n  selector: 'sky-status-indicator',\n  templateUrl: './status-indicator.component.html',\n  styleUrls: ['./status-indicator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkyStatusIndicatorComponent {\n  /**\n   * Specifies a style for the status indicator to determine the icon.\n   * The valid options are `danger`, `info`, `success`, and `warning`.\n   * @default \"warning\"\n   */\n  @Input()\n  public set indicatorType(value: SkyIndicatorIconType) {\n    this._indicatorType = value;\n    this.updateIcon();\n  }\n\n  public get indicatorType(): SkyIndicatorIconType {\n    return this._indicatorType || INDICATOR_TYPE_DEFAULT;\n  }\n\n  /**\n   * Specifies the predefined text to be read by screen readers for users\n   * who cannot see the indicator icon. The valid options are `none`, `custom`,\n   * `error`, `warning`, `completed`, and `important-info`.\n   * @required\n   */\n  @Input()\n  public set descriptionType(value: SkyIndicatorDescriptionType) {\n    this._descriptionType = value;\n    this.updateDescriptionComputed();\n  }\n\n  public get descriptionType(): SkyIndicatorDescriptionType {\n    return this._descriptionType;\n  }\n\n  /**\n   * Specifies the text to be read by screen readers for users who cannot see\n   * the indicator icon when `descriptionType` is `custom`.\n   */\n  @Input()\n  public set customDescription(value: string) {\n    this._customDescription = value;\n    this.updateDescriptionComputed();\n  }\n\n  public get customDescription(): string {\n    return this._customDescription;\n  }\n\n  public descriptionComputed: string;\n\n  public baseIcon: SkyIconStackItem;\n\n  public icon: string;\n\n  public topIcon: SkyIconStackItem;\n\n  private _indicatorType: SkyIndicatorIconType;\n\n  private _descriptionType: SkyIndicatorDescriptionType;\n\n  private _customDescription: string;\n\n  constructor(\n    private changeDetector: ChangeDetectorRef,\n    private resources: SkyLibResourcesService\n  ) {}\n\n  private updateIcon(): void {\n    const indicatorIcon = SkyIndicatorIconUtility.getIconsForType(\n      this.indicatorType\n    );\n\n    this.icon = indicatorIcon.defaultThemeIcon;\n    this.baseIcon = indicatorIcon.modernThemeBaseIcon;\n    this.topIcon = indicatorIcon.modernThemeTopIcon;\n  }\n\n  private updateDescriptionComputed(): void {\n    if (this.descriptionType) {\n      switch (this.descriptionType) {\n        case 'none':\n          this.descriptionComputed = '';\n          break;\n        case 'custom':\n          this.descriptionComputed = this.customDescription;\n          break;\n        default:\n          this.resources\n            .getString(\n              'skyux_status_indicator_sr_' +\n                this.descriptionType.replace(/-/g, '_')\n            )\n            .subscribe((value) => {\n              this.descriptionComputed = value;\n              this.changeDetector.markForCheck();\n            });\n\n          break;\n      }\n    } else {\n      this.descriptionComputed = undefined;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n\n.sky-status-indicator {\n  align-items: baseline;\n  display: flex;\n}\n\n.sky-status-indicator-icon {\n  flex-shrink: 1;\n}\n\n.sky-status-indicator-icon-modern {\n  display: none;\n}\n\n.sky-status-indicator-icon-info {\n  color: $sky-highlight-color-info;\n}\n\n.sky-status-indicator-icon-success {\n  color: $sky-highlight-color-success;\n}\n\n.sky-status-indicator-icon-warning {\n  color: $sky-highlight-color-warning;\n}\n\n.sky-status-indicator-icon-danger {\n  color: $sky-highlight-color-danger;\n}\n\n@include sky-theme-modern {\n  .sky-status-indicator-icon-default {\n    display: none;\n  }\n\n  .sky-status-indicator-icon-modern {\n    display: inline;\n  }\n}\n",
                    "styleUrl": "./status-indicator.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resources",
                        "type": "SkyLibResourcesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resources",
                        "type": "SkyLibResourcesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "indicatorType": {
                    "name": "indicatorType",
                    "setSignature": {
                        "name": "indicatorType",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "SkyIndicatorIconType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "rawdescription": "\n\nSpecifies a style for the status indicator to determine the icon.\nThe valid options are `danger`, `info`, `success`, and `warning`.\n",
                        "description": "<p>Specifies a style for the status indicator to determine the icon.\nThe valid options are <code>danger</code>, <code>info</code>, <code>success</code>, and <code>warning</code>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "SkyIndicatorIconType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "indicatorType",
                        "type": "",
                        "returnType": "SkyIndicatorIconType",
                        "line": 38
                    }
                },
                "descriptionType": {
                    "name": "descriptionType",
                    "setSignature": {
                        "name": "descriptionType",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "SkyIndicatorDescriptionType",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "rawdescription": "\n\nSpecifies the predefined text to be read by screen readers for users\nwho cannot see the indicator icon. The valid options are `none`, `custom`,\n`error`, `warning`, `completed`, and `important-info`.\n",
                        "description": "<p>Specifies the predefined text to be read by screen readers for users\nwho cannot see the indicator icon. The valid options are <code>none</code>, <code>custom</code>,\n<code>error</code>, <code>warning</code>, <code>completed</code>, and <code>important-info</code>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "SkyIndicatorDescriptionType",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "descriptionType",
                        "type": "",
                        "returnType": "SkyIndicatorDescriptionType",
                        "line": 54
                    }
                },
                "customDescription": {
                    "name": "customDescription",
                    "setSignature": {
                        "name": "customDescription",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 63,
                        "rawdescription": "\n\nSpecifies the text to be read by screen readers for users who cannot see\nthe indicator icon when `descriptionType` is `custom`.\n",
                        "description": "<p>Specifies the text to be read by screen readers for users who cannot see\nthe indicator icon when <code>descriptionType</code> is <code>custom</code>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "customDescription",
                        "type": "string",
                        "returnType": "string",
                        "line": 68
                    }
                }
            },
            "templateData": "<div *ngIf=\"descriptionType\" class=\"sky-status-indicator\">\n  <div\n    aria-hidden=\"true\"\n    class=\"sky-margin-inline-xs sky-status-indicator-icon\"\n    [ngClass]=\"'sky-status-indicator-icon-' + indicatorType\"\n  >\n    <span class=\"sky-status-indicator-icon-default\">\n      <sky-icon [icon]=\"icon\"></sky-icon>\n    </span>\n    <span class=\"sky-status-indicator-icon-modern\">\n      <sky-icon-stack size=\"xs\" [baseIcon]=\"baseIcon\" [topIcon]=\"topIcon\">\n      </sky-icon-stack>\n    </span>\n  </div>\n  <div class=\"sky-status-indicator-message-wrapper\">\n    <span *ngIf=\"descriptionComputed\" class=\"sky-screen-reader-only\">\n      {{ descriptionComputed }}\n    </span>\n    <span class=\"sky-status-indicator-message\">\n      <ng-content></ng-content>\n    </span>\n  </div>\n</div>\n"
        },
        {
            "name": "SkyTextHighlightDemoComponent",
            "id": "component-SkyTextHighlightDemoComponent-cc9a908908e036d658fcb5ddf8184249626672cf33ae3f68e75c5ad78705c60c0a07aa7c4a6207898bccd07fb364ca06dbdbe78000a946eab1d0ae24bca19519",
            "file": "projects/indicators-showcase/src/app/visual/text-highlight/text-highlight-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-text-highlight-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./text-highlight-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arrayOfSearchTerms",
                    "defaultValue": "['Åland', 'Aland']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "blankSearchTerm",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "normalSearchTerm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notMatchedSearchTerm",
                    "defaultValue": "'xnotmatched'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-text-highlight-demo',\n  templateUrl: './text-highlight-demo.component.html',\n})\nexport class SkyTextHighlightDemoComponent {\n  public arrayOfSearchTerms = ['Åland', 'Aland'];\n  public normalSearchTerm: string;\n  public blankSearchTerm = '';\n  public notMatchedSearchTerm = 'xnotmatched';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<input [(ngModel)]=\"normalSearchTerm\" />\n<div class=\"sky-text-highlight-demo\">\n  <div [skyHighlight]=\"normalSearchTerm\">\n    The text that you enter should be highlighted here.\n  </div>\n  <div [skyHighlight]=\"arrayOfSearchTerms\">\n    This paragraph should be highlighed by two different values in an array:\n    Åland Islands and Aland Islands.\n  </div>\n  <div [skyHighlight]=\"blankSearchTerm\">\n    This paragraph should not be highlighted, because we're passing a blank\n    search term.\n  </div>\n  <div [skyHighlight]=\"notMatchedSearchTerm\">\n    This paragraph should not be highlighted, because we're passing a search\n    term that's not found.\n  </div>\n</div>\n"
        },
        {
            "name": "SkyTextHighlightTestComponent",
            "id": "component-SkyTextHighlightTestComponent-ba87b5b5467eb3cd4ceea3927fc4526bec09df755efa8980fa12d633496db9b912b2b67a5ab379fc459d5460f6d66adfcb8e840e77ced217b0b86962c6485c44",
            "file": "projects/indicators/src/modules/text-highlight/fixtures/text-highlight.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-text-highlight-component",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "text-highlight.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "innerText1",
                    "defaultValue": "'Here is some test text.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "innerText2",
                    "defaultValue": "'Here is additional text that was previously hidden in src\\\\app.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchTerm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | string[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showAdditionalContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "textHighlightDirective",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyTextHighlightDirective",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SkyTextHighlightDirective"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\n\nimport { SkyTextHighlightDirective } from '../text-highlight.directive';\n\n@Component({\n  selector: 'sky-text-highlight-component',\n  templateUrl: 'text-highlight.component.fixture.html',\n})\nexport class SkyTextHighlightTestComponent {\n  public searchTerm: string | string[];\n  public showAdditionalContent = false;\n  public innerText1 = 'Here is some test text.';\n  public innerText2 =\n    'Here is additional text that was previously hidden in src\\\\app.';\n\n  @ViewChild(SkyTextHighlightDirective)\n  public textHighlightDirective: SkyTextHighlightDirective;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<input\n  aria-label=\"noop\"\n  class=\"sky-input-search-term\"\n  type=\"text\"\n  [(ngModel)]=\"searchTerm\"\n/>\n\n<input\n  aria-label=\"noop\"\n  class=\"sky-test-checkbox\"\n  type=\"checkbox\"\n  [(ngModel)]=\"showAdditionalContent\"\n/>\n\n<div class=\"sky-test-div-container\" [skyHighlight]=\"searchTerm\">\n  {{innerText1}}\n  <div *ngIf=\"showAdditionalContent\">{{innerText2}}</div>\n</div>\n"
        },
        {
            "name": "SkyTokenComponent",
            "id": "component-SkyTokenComponent-f5d1e1a7d5e72c1810a624b86a93487914bc2f23154bac6c831e5b05281f5f8ecb5f0d3066c100fb34c5fa3fa3dd0d73f77af55c601fe0e0d5c04461e788823b",
            "file": "projects/indicators/src/modules/tokens/token.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-token",
            "styleUrls": [
                "./token.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./token.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 996,
                            "end": 1022,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 997,
                                "end": 1004,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>&quot;Remove item&quot;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nSpecifies an ARIA label for the token's close button. This sets the button's `aria-label`\n[to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility).\n",
                    "description": "<p>Specifies an ARIA label for the token&#39;s close button. This sets the button&#39;s <code>aria-label</code>\n<a href=\"https://developer.blackbaud.com/skyux/learn/accessibility\">to support accessibility</a>.</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 625,
                            "end": 642,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 626,
                                "end": 633,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether to disable the token to prevent users from selecting it, dismissing it,\nor navigating to it with the arrow keys. When the token is disabled,\nusers can still place focus on it using the `Tab` key.\n",
                    "description": "<p>Indicates whether to disable the token to prevent users from selecting it, dismissing it,\nor navigating to it with the arrow keys. When the token is disabled,\nusers can still place focus on it using the <code>Tab</code> key.</p>\n",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1390,
                            "end": 1407,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1391,
                                "end": 1398,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether users can remove the token from the list by selecting the close button\nor pressing the `Backspace` key.\n",
                    "description": "<p>Indicates whether users can remove the token from the list by selecting the close button\nor pressing the <code>Backspace</code> key.</p>\n",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "focusable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1786,
                            "end": 1803,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1787,
                                "end": 1794,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether users can press the `Tab` key to place focus on the token. This does not\naffect the ability to select the token, dismiss it, or navigate to it with the arrow keys.\n",
                    "description": "<p>Indicates whether users can press the <code>Tab</code> key to place focus on the token. This does not\naffect the ability to select the token, dismiss it, or navigate to it with the arrow keys.</p>\n",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dismiss",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when users click the close button or press the `Backspace` key to dismiss the token.\n",
                    "description": "<p>Fires when users click the close button or press the <code>Backspace</code> key to dismiss the token.</p>\n",
                    "line": 82,
                    "type": "EventEmitter"
                },
                {
                    "name": "tokenFocus",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when users place focus on the token by navigating to it with the `Tab` key.\n",
                    "description": "<p>Fires when users place focus on the token by navigating to it with the <code>Tab</code> key.</p>\n",
                    "line": 88,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_focusable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "closeActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "rawdescription": "\n\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "pos": 2479,
                            "end": 2492,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2480,
                                "end": 2488,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "tokenActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "rawdescription": "\n\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "pos": 2420,
                            "end": 2433,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2421,
                                "end": 2429,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "internal"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dismissToken",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getString",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCloseActive",
                    "args": [
                        {
                            "name": "closeActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "closeActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTokenActive",
                    "args": [
                        {
                            "name": "tokenActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "tokenActive",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\n\nimport { SkyLibResourcesService } from '@skyux/i18n';\n\n@Component({\n  selector: 'sky-token',\n  templateUrl: './token.component.html',\n  styleUrls: ['./token.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SkyTokenComponent {\n  /**\n   * Indicates whether to disable the token to prevent users from selecting it, dismissing it,\n   * or navigating to it with the arrow keys. When the token is disabled,\n   * users can still place focus on it using the `Tab` key.\n   * @default true\n   */\n  @Input()\n  public set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  public get disabled(): boolean {\n    return !!this._disabled;\n  }\n\n  /**\n   * Specifies an ARIA label for the token's close button. This sets the button's `aria-label`\n   * [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility).\n   * @default \"Remove item\"\n   */\n  @Input()\n  public set ariaLabel(value: string) {\n    this._ariaLabel = value;\n  }\n\n  public get ariaLabel(): string {\n    return (\n      this._ariaLabel || this.getString('skyux_tokens_dismiss_button_title')\n    );\n  }\n\n  /**\n   * Indicates whether users can remove the token from the list by selecting the close button\n   * or pressing the `Backspace` key.\n   * @default true\n   */\n  @Input()\n  public set dismissible(value: boolean) {\n    this._dismissible = value;\n  }\n\n  public get dismissible(): boolean {\n    return this._dismissible !== false;\n  }\n\n  /**\n   * Indicates whether users can press the `Tab` key to place focus on the token. This does not\n   * affect the ability to select the token, dismiss it, or navigate to it with the arrow keys.\n   * @default true\n   */\n  @Input()\n  public set focusable(value: boolean) {\n    this._focusable = value;\n  }\n\n  public get focusable(): boolean {\n    return this._focusable !== false;\n  }\n\n  /**\n   * Fires when users click the close button or press the `Backspace` key to dismiss the token.\n   */\n  @Output()\n  public dismiss = new EventEmitter<void>();\n\n  /**\n   * Fires when users place focus on the token by navigating to it with the `Tab` key.\n   */\n  @Output()\n  public tokenFocus = new EventEmitter<void>();\n\n  /**\n   * @internal\n   */\n  public get tabIndex(): number | boolean {\n    return this.focusable ? 0 : -1;\n  }\n\n  /**\n   * @internal\n   */\n  public tokenActive: boolean;\n\n  /**\n   * @internal\n   */\n  public closeActive: boolean;\n\n  private _ariaLabel: string;\n  private _disabled: boolean;\n  private _dismissible: boolean;\n  private _focusable: boolean;\n\n  constructor(\n    private elementRef: ElementRef,\n    private resourcesService: SkyLibResourcesService\n  ) {}\n\n  public dismissToken(event: Event): void {\n    event.stopPropagation();\n    this.dismiss.emit();\n  }\n\n  public focusElement(): void {\n    this.elementRef.nativeElement.querySelector('.sky-token').focus();\n  }\n\n  public setTokenActive(tokenActive: boolean): void {\n    this.tokenActive = tokenActive;\n  }\n\n  public setCloseActive(closeActive: boolean): void {\n    this.closeActive = closeActive;\n  }\n\n  private getString(key: string): string {\n    // TODO: Need to implement the async `getString` method in a breaking change.\n    return this.resourcesService.getStringForLocale({ locale: 'en-US' }, key);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/variables';\n@import '~@skyux/theme/scss/_compat/mixins';\n\n.sky-token {\n  background-color: $sky-background-color-info-light;\n  border: 1px solid $sky-highlight-color-info;\n  overflow: hidden;\n  padding: 2px 8px;\n  display: inline-block;\n  user-select: none;\n\n  &:hover,\n  &:focus {\n    background-color: darken($sky-background-color-info-light, 10%);\n    border-color: darken($sky-highlight-color-info, 10%);\n    cursor: pointer;\n  }\n\n  &:focus {\n    @include sky-field-status('active');\n  }\n}\n\n.sky-btn-disabled {\n  cursor: default;\n  user-select: none;\n}\n\n.sky-token-btn-close {\n  background: transparent;\n  padding: 0;\n  border: 0;\n  margin-left: 2px;\n  opacity: 0.9;\n\n  &:hover,\n  &:focus {\n    opacity: 1;\n  }\n}\n\n.sky-token-btn-close-icon-modern {\n  display: none;\n}\n\n@include sky-theme-modern {\n  .sky-token {\n    align-items: center;\n    display: inline-flex;\n    padding: 1px 5px;\n    font-size: 14px;\n\n    &.sky-btn-disabled {\n      color: $sky-text-color-default;\n    }\n\n    &:not(.sky-btn-disabled) {\n      @include sky-theme-modern-border($sky-background-color-info);\n    }\n\n    &.sky-token-dismissable {\n      padding-right: 1px;\n    }\n\n    &:hover:not(:active) {\n      @include sky-theme-modern-border-hover;\n    }\n\n    &.sky-token-active {\n      @include sky-theme-modern-border-active;\n    }\n\n    &:focus:not(:active) {\n      @include sky-theme-modern-border-focus;\n    }\n\n    &:focus,\n    &:hover {\n      background-color: $sky-background-color-info-light;\n    }\n  }\n\n  .sky-token-btn-close {\n    align-items: center;\n    border-radius: $sky-theme-modern-border-radius-md - 1;\n    display: flex;\n    height: 20px;\n    margin-left: $sky-theme-modern-margin-inline-xs;\n    width: 20px;\n\n    &:hover {\n      @include sky-theme-modern-border-hover(transparent);\n    }\n\n    &.sky-token-btn-close-active {\n      @include sky-theme-modern-border-active;\n    }\n\n    &:focus {\n      outline: none;\n\n      &:not(:active) {\n        @include sky-theme-modern-border-focus;\n      }\n    }\n  }\n\n  .sky-token-btn-close-icon-default {\n    display: none;\n  }\n\n  .sky-token-btn-close-icon-modern {\n    display: inline-block;\n    width: 100%;\n  }\n}\n\n@include sky-theme-modern-dark {\n  .sky-token {\n    background-color: $sky-background-color-info-light;\n  }\n\n  .sky-token,\n  .sky-token-btn-close {\n    color: $sky-text-color-default;\n  }\n}\n",
                    "styleUrl": "./token.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resourcesService",
                        "type": "SkyLibResourcesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 110,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resourcesService",
                        "type": "SkyLibResourcesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "rawdescription": "\n\nIndicates whether to disable the token to prevent users from selecting it, dismissing it,\nor navigating to it with the arrow keys. When the token is disabled,\nusers can still place focus on it using the `Tab` key.\n",
                        "description": "<p>Indicates whether to disable the token to prevent users from selecting it, dismissing it,\nor navigating to it with the arrow keys. When the token is disabled,\nusers can still place focus on it using the <code>Tab</code> key.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 30
                    }
                },
                "ariaLabel": {
                    "name": "ariaLabel",
                    "setSignature": {
                        "name": "ariaLabel",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 40,
                        "rawdescription": "\n\nSpecifies an ARIA label for the token's close button. This sets the button's `aria-label`\n[to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility).\n",
                        "description": "<p>Specifies an ARIA label for the token&#39;s close button. This sets the button&#39;s <code>aria-label</code>\n<a href=\"https://developer.blackbaud.com/skyux/learn/accessibility\">to support accessibility</a>.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "ariaLabel",
                        "type": "string",
                        "returnType": "string",
                        "line": 44
                    }
                },
                "dismissible": {
                    "name": "dismissible",
                    "setSignature": {
                        "name": "dismissible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 56,
                        "rawdescription": "\n\nIndicates whether users can remove the token from the list by selecting the close button\nor pressing the `Backspace` key.\n",
                        "description": "<p>Indicates whether users can remove the token from the list by selecting the close button\nor pressing the <code>Backspace</code> key.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dismissible",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 60
                    }
                },
                "focusable": {
                    "name": "focusable",
                    "setSignature": {
                        "name": "focusable",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "rawdescription": "\n\nIndicates whether users can press the `Tab` key to place focus on the token. This does not\naffect the ability to select the token, dismiss it, or navigate to it with the arrow keys.\n",
                        "description": "<p>Indicates whether users can press the <code>Tab</code> key to place focus on the token. This does not\naffect the ability to select the token, dismiss it, or navigate to it with the arrow keys.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "focusable",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 74
                    }
                },
                "tabIndex": {
                    "name": "tabIndex",
                    "getSignature": {
                        "name": "tabIndex",
                        "type": "",
                        "returnType": "number | boolean",
                        "line": 93,
                        "rawdescription": "\n\n",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 2308,
                                "end": 2321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 325,
                                "tagName": {
                                    "pos": 2309,
                                    "end": 2317,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "internal"
                                },
                                "comment": ""
                            }
                        ]
                    }
                }
            },
            "templateData": "<div\n  class=\"sky-token sky-btn sky-btn-default\"\n  role=\"button\"\n  [attr.aria-disabled]=\"disabled\"\n  [attr.tabindex]=\"tabIndex\"\n  [ngClass]=\"{\n    'sky-btn-disabled': disabled,\n    'sky-token-dismissable': dismissible,\n    'sky-token-active': tokenActive && !closeActive\n  }\"\n  (document:mouseup)=\"setTokenActive(false)\"\n  (focus)=\"tokenFocus.emit()\"\n  (mousedown)=\"setTokenActive(true)\"\n>\n  <ng-content></ng-content>\n  <button\n    *ngIf=\"dismissible\"\n    class=\"sky-btn sky-token-btn-close\"\n    type=\"button\"\n    [attr.aria-label]=\"ariaLabel\"\n    [attr.tabindex]=\"tabIndex\"\n    [attr.title]=\"ariaLabel\"\n    [disabled]=\"disabled\"\n    [ngClass]=\"{\n      'sky-token-btn-close-active': closeActive\n    }\"\n    (click)=\"dismissToken($event)\"\n    (document:mouseup)=\"setCloseActive(false)\"\n    (mousedown)=\"setCloseActive(true)\"\n  >\n    <sky-icon class=\"sky-token-btn-close-icon-default\" icon=\"times\"></sky-icon>\n    <sky-icon\n      class=\"sky-token-btn-close-icon-modern\"\n      icon=\"close\"\n      iconType=\"skyux\"\n    >\n    </sky-icon>\n  </button>\n</div>\n"
        },
        {
            "name": "SkyTokensComponent",
            "id": "component-SkyTokensComponent-3779fefc72b4342ab53f2028462830d05dc01c9d77c4b0246f2b6c16f1c7e95b19bf754d0d631c0e2e3dc03fa43d441a301ba9fb3f2cc16b515bc8a18cd6ae02",
            "file": "projects/indicators/src/modules/tokens/tokens.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-tokens",
            "styleUrls": [
                "./tokens.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tokens.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1699,
                            "end": 1717,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1700,
                                "end": 1707,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether to disable the tokens list to prevent users from selecting tokens,\ndismissing tokens, or navigating through the list with the arrow keys. When the tokens list\nis disabled, users can still place focus on items in the list using the `Tab` key.\n",
                    "description": "<p>Indicates whether to disable the tokens list to prevent users from selecting tokens,\ndismissing tokens, or navigating through the list with the arrow keys. When the tokens list\nis disabled, users can still place focus on items in the list using the <code>Tab</code> key.</p>\n",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2016,
                            "end": 2033,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2017,
                                "end": 2024,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether users can remove tokens from the list by selecting their close buttons\nor pressing the `Backspace` key.\n",
                    "description": "<p>Indicates whether users can remove tokens from the list by selecting their close buttons\nor pressing the <code>Backspace</code> key.</p>\n",
                    "line": 84,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "displayWith",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2299,
                            "end": 2318,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2300,
                                "end": 2307,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>&#39;name&#39;</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nSpecifies the token property to display for each item in the tokens list.\n",
                    "description": "<p>Specifies the token property to display for each item in the tokens list.</p>\n",
                    "line": 97,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "focusable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2932,
                            "end": 2949,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2933,
                                "end": 2940,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>true</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nIndicates whether users can focus on items in the list using the `Tab` key.\nThis does not affect the ability of users to select tokens, dismiss tokens,\nor navigate through the list with the arrow keys.\n",
                    "description": "<p>Indicates whether users can focus on items in the list using the <code>Tab</code> key.\nThis does not affect the ability of users to select tokens, dismiss tokens,\nor navigate through the list with the arrow keys.</p>\n",
                    "line": 119,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "messageStream",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies an observable of `SkyTokensMessage` that can place focus on a\nparticular token or remove the active token from the list.\n",
                    "description": "<p>Specifies an observable of <code>SkyTokensMessage</code> that can place focus on a\nparticular token or remove the active token from the list.</p>\n",
                    "line": 145,
                    "type": "",
                    "decorators": []
                },
                {
                    "name": "tokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies an array of tokens to include in the list.\n",
                    "description": "<p>Specifies an array of tokens to include in the list.</p>\n",
                    "line": 131,
                    "type": "[]",
                    "decorators": []
                },
                {
                    "name": "trackWith",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies the token property that represents the token's unique identifier. When this property\nis set, animations are enabled when dismissing tokens.\n",
                    "description": "<p>Specifies the token property that represents the token&#39;s unique identifier. When this property\nis set, animations are enabled when dismissing tokens.</p>\n",
                    "line": 110,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "focusIndexOverRange",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when users navigate through the tokens list with the `Tab` key\nand attempt to move past the final token in the list.\n",
                    "description": "<p>Fires when users navigate through the tokens list with the <code>Tab</code> key\nand attempt to move past the final token in the list.</p>\n",
                    "line": 159,
                    "type": "EventEmitter"
                },
                {
                    "name": "focusIndexUnderRange",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when usersnavigate through the tokens list with the `Tab` key\nand attempt to move before the first token in the list.\n",
                    "description": "<p>Fires when usersnavigate through the tokens list with the <code>Tab</code> key\nand attempt to move before the first token in the list.</p>\n",
                    "line": 166,
                    "type": "EventEmitter"
                },
                {
                    "name": "tokensChange",
                    "defaultValue": "new EventEmitter<SkyToken[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when the tokens in the list change.\nThis event emits an array of the tokens in the updated list.\n",
                    "description": "<p>Fires when the tokens in the list change.\nThis event emits an array of the tokens in the updated list.</p>\n",
                    "line": 179,
                    "type": "EventEmitter"
                },
                {
                    "name": "tokenSelected",
                    "defaultValue": "new EventEmitter<SkyTokenSelectedEventArgs>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFires when users select a token in the list. This event emits the selected token.\n",
                    "description": "<p>Fires when users select a token in the list. This event emits the selected token.</p>\n",
                    "line": 172,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 212,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 213,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 214,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_displayWith",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 217,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_focusable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 215,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_messageStream",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<SkyTokensMessage>",
                    "optional": false,
                    "description": "",
                    "line": 218,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_tokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyToken[]",
                    "optional": false,
                    "description": "",
                    "line": 216,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "messageStreamSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 209,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngUnsubscribe",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 210,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tokenComponents",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<SkyTokenComponent>",
                    "optional": false,
                    "description": "",
                    "line": 207,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "SkyTokenComponent"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "trackTokenFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "<p>internal</p>\n",
                    "line": 204,
                    "rawdescription": "\n\ninternal\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "focusActiveToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusLastToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusNextToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "focusPreviousToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 280,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "initMessageStream",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notifyTokenSelected",
                    "args": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTokenClick",
                    "args": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTokenKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeActiveToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "removeToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "SkyToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { animate, style, transition, trigger } from '@angular/animations';\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\n\nimport { Subject, Subscription } from 'rxjs';\n\nimport { takeUntil } from 'rxjs/operators';\n\nimport { SkyToken } from './types/token';\n\nimport { SkyTokensMessage } from './types/tokens-message';\n\nimport { SkyTokensMessageType } from './types/tokens-message-type';\n\nimport { SkyTokenSelectedEventArgs } from './types/token-selected-event-args';\n\nimport { SkyTokenComponent } from './token.component';\n\n@Component({\n  selector: 'sky-tokens',\n  templateUrl: './tokens.component.html',\n  styleUrls: ['./tokens.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    trigger('blockAnimationOnLoad', [transition(':enter', [])]),\n    trigger('dismiss', [\n      transition(':enter', [\n        style({\n          opacity: 0,\n          width: 0,\n        }),\n        animate(\n          '150ms ease-in',\n          style({\n            opacity: 1,\n            width: '*',\n          })\n        ),\n      ]),\n      transition(':leave', [\n        animate(\n          '150ms ease-in',\n          style({\n            opacity: 0,\n            width: 0,\n          })\n        ),\n      ]),\n    ]),\n  ],\n})\nexport class SkyTokensComponent implements OnDestroy {\n  /**\n   * Indicates whether to disable the tokens list to prevent users from selecting tokens,\n   * dismissing tokens, or navigating through the list with the arrow keys. When the tokens list\n   * is disabled, users can still place focus on items in the list using the `Tab` key.\n   * @default false\n   */\n  @Input()\n  public set disabled(value: boolean) {\n    this._disabled = value;\n  }\n\n  public get disabled(): boolean {\n    return !!this._disabled;\n  }\n\n  /**\n   * Indicates whether users can remove tokens from the list by selecting their close buttons\n   * or pressing the `Backspace` key.\n   * @default true\n   */\n  @Input()\n  public set dismissible(value: boolean) {\n    this._dismissible = value;\n  }\n\n  public get dismissible(): boolean {\n    return this._dismissible !== false;\n  }\n\n  /**\n   * Specifies the token property to display for each item in the tokens list.\n   * @default 'name'\n   */\n  @Input()\n  public set displayWith(value: string) {\n    this._displayWith = value;\n  }\n\n  public get displayWith(): string {\n    return this._displayWith || 'name';\n  }\n\n  /**\n   * Specifies the token property that represents the token's unique identifier. When this property\n   * is set, animations are enabled when dismissing tokens.\n   */\n  @Input()\n  public trackWith: string;\n\n  /**\n   * Indicates whether users can focus on items in the list using the `Tab` key.\n   * This does not affect the ability of users to select tokens, dismiss tokens,\n   * or navigate through the list with the arrow keys.\n   * @default true\n   */\n  @Input()\n  public set focusable(value: boolean) {\n    this._focusable = value;\n  }\n\n  public get focusable(): boolean {\n    return this._focusable !== false;\n  }\n\n  /**\n   * Specifies an array of tokens to include in the list.\n   */\n  @Input()\n  public set tokens(value: SkyToken[]) {\n    this._tokens = value;\n    this.tokensChange.emit(this._tokens);\n  }\n\n  public get tokens(): SkyToken[] {\n    return this._tokens || [];\n  }\n\n  /**\n   * Specifies an observable of `SkyTokensMessage` that can place focus on a\n   * particular token or remove the active token from the list.\n   */\n  @Input()\n  public set messageStream(value: Subject<SkyTokensMessage>) {\n    this._messageStream = value;\n    this.initMessageStream();\n  }\n\n  public get messageStream(): Subject<SkyTokensMessage> {\n    return this._messageStream;\n  }\n\n  /**\n   * Fires when users navigate through the tokens list with the `Tab` key\n   * and attempt to move past the final token in the list.\n   */\n  @Output()\n  public focusIndexOverRange = new EventEmitter<void>();\n\n  /**\n   * Fires when usersnavigate through the tokens list with the `Tab` key\n   * and attempt to move before the first token in the list.\n   */\n  @Output()\n  public focusIndexUnderRange = new EventEmitter<void>();\n\n  /**\n   * Fires when users select a token in the list. This event emits the selected token.\n   */\n  @Output()\n  public tokenSelected = new EventEmitter<SkyTokenSelectedEventArgs>();\n\n  /**\n   * Fires when the tokens in the list change.\n   * This event emits an array of the tokens in the updated list.\n   */\n  @Output()\n  public tokensChange = new EventEmitter<SkyToken[]>();\n\n  /**\n   * @internal\n   */\n  public get activeIndex(): number {\n    return this._activeIndex || 0;\n  }\n  public set activeIndex(value: number) {\n    if (value >= this.tokens.length) {\n      value = this.tokens.length - 1;\n      this.focusIndexOverRange.emit();\n    }\n\n    if (value < 0) {\n      value = 0;\n      this.focusIndexUnderRange.emit();\n    }\n\n    this._activeIndex = value;\n  }\n\n  /**\n   * internal\n   */\n  public trackTokenFn: (index: number, item: SkyToken) => any;\n\n  @ViewChildren(SkyTokenComponent)\n  private tokenComponents: QueryList<SkyTokenComponent>;\n\n  private messageStreamSub: Subscription;\n  private ngUnsubscribe = new Subject();\n\n  private _activeIndex: number;\n  private _disabled: boolean;\n  private _dismissible: boolean;\n  private _focusable: boolean;\n  private _tokens: SkyToken[];\n  private _displayWith: string;\n  private _messageStream: Subject<SkyTokensMessage>;\n\n  constructor(private changeDetector: ChangeDetectorRef) {\n    // Angular calls the trackBy function without applying the component instance's scope.\n    // Use a fat-arrow function so the current component instance's trackWith property can\n    // be referenced.\n    this.trackTokenFn = (_index, item) => {\n      if (this.trackWith) {\n        return item.value[this.trackWith];\n      }\n\n      return item;\n    };\n  }\n\n  public ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  public onTokenClick(token: SkyToken): void {\n    if (this.disabled) {\n      return;\n    }\n\n    this.notifyTokenSelected(token);\n  }\n\n  public onTokenKeyDown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      /* tslint:disable-next-line:switch-default */\n      switch (event.key) {\n        case 'Left':\n        case 'ArrowLeft':\n          this.messageStream.next({\n            type: SkyTokensMessageType.FocusPreviousToken,\n          });\n          event.preventDefault();\n          break;\n\n        case 'Right':\n        case 'ArrowRight':\n          this.messageStream.next({\n            type: SkyTokensMessageType.FocusNextToken,\n          });\n          event.preventDefault();\n          break;\n      }\n    }\n  }\n\n  public selectToken(token: SkyToken): void {\n    if (!this.disabled) {\n      this.notifyTokenSelected(token);\n    }\n  }\n\n  public removeToken(token: SkyToken): void {\n    this.tokens = this.tokens.filter((t) => t !== token);\n    this.changeDetector.detectChanges();\n  }\n\n  private focusPreviousToken(): void {\n    this.activeIndex--;\n    this.focusActiveToken();\n  }\n\n  private focusNextToken(): void {\n    this.activeIndex++;\n    this.focusActiveToken();\n  }\n\n  private focusLastToken(): void {\n    this.activeIndex = this.tokenComponents.length - 1;\n    this.focusActiveToken();\n  }\n\n  private focusActiveToken(): void {\n    const tokenComponent = this.tokenComponents.find(\n      (_comp: SkyTokenComponent, i: number) => {\n        return this.activeIndex === i;\n      }\n    );\n\n    if (tokenComponent) {\n      tokenComponent.focusElement();\n    }\n  }\n\n  private removeActiveToken(): void {\n    const token = this.tokens[this.activeIndex];\n    if (token) {\n      this.removeToken(token);\n    }\n  }\n\n  private initMessageStream(): void {\n    if (this.messageStreamSub) {\n      this.messageStreamSub.unsubscribe();\n    }\n\n    if (this.messageStream) {\n      this.messageStreamSub = this.messageStream\n        .pipe(takeUntil(this.ngUnsubscribe))\n        .subscribe((message: SkyTokensMessage) => {\n          /* tslint:disable-next-line:switch-default */\n          switch (message.type) {\n            case SkyTokensMessageType.FocusLastToken:\n              this.focusLastToken();\n              break;\n\n            case SkyTokensMessageType.FocusActiveToken:\n              this.focusActiveToken();\n              break;\n\n            case SkyTokensMessageType.FocusPreviousToken:\n              this.focusPreviousToken();\n              break;\n\n            case SkyTokensMessageType.FocusNextToken:\n              this.focusNextToken();\n              break;\n\n            case SkyTokensMessageType.RemoveActiveToken:\n              this.removeActiveToken();\n              break;\n          }\n        });\n    }\n  }\n\n  private notifyTokenSelected(token: SkyToken): void {\n    this.tokenSelected.emit({\n      token,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n\n$sky-tokens-gutter-size: 2px;\n\n.sky-tokens {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: baseline;\n  margin: 0 -$sky-tokens-gutter-size;\n\n  .sky-tokens-content,\n  ::ng-deep sky-token {\n    flex: 0 0 auto;\n    display: inline-flex;\n    padding: $sky-tokens-gutter-size;\n  }\n\n  .sky-tokens-content {\n    flex-grow: 1;\n    flex-basis: 0px;\n\n    // Add a zero-width space to allow form controls to align\n    // properly to text baseline.\n    &:before {\n      content: \"#{'\\200B'}\";\n    }\n  }\n}\n",
                    "styleUrl": "./tokens.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 218,
                "jsdoctags": [
                    {
                        "name": "changeDetector",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnDestroy"
            ],
            "accessors": {
                "disabled": {
                    "name": "disabled",
                    "setSignature": {
                        "name": "disabled",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 70,
                        "rawdescription": "\n\nIndicates whether to disable the tokens list to prevent users from selecting tokens,\ndismissing tokens, or navigating through the list with the arrow keys. When the tokens list\nis disabled, users can still place focus on items in the list using the `Tab` key.\n",
                        "description": "<p>Indicates whether to disable the tokens list to prevent users from selecting tokens,\ndismissing tokens, or navigating through the list with the arrow keys. When the tokens list\nis disabled, users can still place focus on items in the list using the <code>Tab</code> key.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disabled",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 74
                    }
                },
                "dismissible": {
                    "name": "dismissible",
                    "setSignature": {
                        "name": "dismissible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 84,
                        "rawdescription": "\n\nIndicates whether users can remove tokens from the list by selecting their close buttons\nor pressing the `Backspace` key.\n",
                        "description": "<p>Indicates whether users can remove tokens from the list by selecting their close buttons\nor pressing the <code>Backspace</code> key.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dismissible",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 88
                    }
                },
                "displayWith": {
                    "name": "displayWith",
                    "setSignature": {
                        "name": "displayWith",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 97,
                        "rawdescription": "\n\nSpecifies the token property to display for each item in the tokens list.\n",
                        "description": "<p>Specifies the token property to display for each item in the tokens list.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "string",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "displayWith",
                        "type": "string",
                        "returnType": "string",
                        "line": 101
                    }
                },
                "focusable": {
                    "name": "focusable",
                    "setSignature": {
                        "name": "focusable",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 119,
                        "rawdescription": "\n\nIndicates whether users can focus on items in the list using the `Tab` key.\nThis does not affect the ability of users to select tokens, dismiss tokens,\nor navigate through the list with the arrow keys.\n",
                        "description": "<p>Indicates whether users can focus on items in the list using the <code>Tab</code> key.\nThis does not affect the ability of users to select tokens, dismiss tokens,\nor navigate through the list with the arrow keys.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "focusable",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 123
                    }
                },
                "tokens": {
                    "name": "tokens",
                    "setSignature": {
                        "name": "tokens",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "SkyToken[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 131,
                        "rawdescription": "\n\nSpecifies an array of tokens to include in the list.\n",
                        "description": "<p>Specifies an array of tokens to include in the list.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "SkyToken[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "tokens",
                        "type": "[]",
                        "returnType": "SkyToken[]",
                        "line": 136
                    }
                },
                "messageStream": {
                    "name": "messageStream",
                    "setSignature": {
                        "name": "messageStream",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "Subject<SkyTokensMessage>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 145,
                        "rawdescription": "\n\nSpecifies an observable of `SkyTokensMessage` that can place focus on a\nparticular token or remove the active token from the list.\n",
                        "description": "<p>Specifies an observable of <code>SkyTokensMessage</code> that can place focus on a\nparticular token or remove the active token from the list.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "Subject<SkyTokensMessage>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "messageStream",
                        "type": "",
                        "returnType": "Subject<SkyTokensMessage>",
                        "line": 150
                    }
                },
                "activeIndex": {
                    "name": "activeIndex",
                    "setSignature": {
                        "name": "activeIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 187,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "activeIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 184,
                        "rawdescription": "\n\n",
                        "description": "",
                        "jsdoctags": [
                            {
                                "pos": 4595,
                                "end": 4608,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 325,
                                "tagName": {
                                    "pos": 4596,
                                    "end": 4604,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "internal"
                                },
                                "comment": ""
                            }
                        ]
                    }
                }
            },
            "templateData": "<div\n  *ngIf=\"tokens\"\n  class=\"sky-tokens\"\n  [@blockAnimationOnLoad]\n  [attr.role]=\"tokens && tokens.length ? 'list' : null\"\n>\n  <sky-token\n    *ngFor=\"let token of tokens; let i = index; trackBy: trackTokenFn\"\n    role=\"listitem\"\n    [@.disabled]=\"!trackWith\"\n    [@dismiss]\n    [disabled]=\"disabled\"\n    [dismissible]=\"dismissible\"\n    [focusable]=\"focusable\"\n    (dismiss)=\"removeToken(token)\"\n    (click)=\"onTokenClick(token)\"\n    (keydown)=\"onTokenKeyDown($event)\"\n    (keyup.enter)=\"selectToken(token); $event.preventDefault()\"\n    (tokenFocus)=\"activeIndex = i\"\n  >\n    {{ token.value[displayWith] }}\n  </sky-token>\n  <div class=\"sky-tokens-content\">\n    <ng-content></ng-content>\n  </div>\n</div>\n"
        },
        {
            "name": "SkyTokensDemoComponent",
            "id": "component-SkyTokensDemoComponent-6566860ff86a1fdefa1a78d5d3231b155e1e916ca1b719fb87696d16025245f6b3c04ee307a24200540374970fb4b4486f440f9ac76cd16f7a816aef401dbae9",
            "file": "projects/indicators-showcase/src/app/visual/tokens/tokens-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-tokens-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tokens-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "defaultValue": "[\n    { id: 1, name: 'Black' },\n    { id: 2, name: 'Blue' },\n    { id: 3, name: 'Brown' },\n    { id: 4, name: 'Green' },\n    { id: 5, name: 'Orange' },\n    { id: 6, name: 'Pink' },\n    { id: 7, name: 'Purple' },\n    { id: 8, name: 'Red' },\n    { id: 9, name: 'Turquoise' },\n    { id: 10, name: 'White' },\n    { id: 11, name: 'Yellow' },\n  ].map((value) => ({ value }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyToken[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filters",
                    "defaultValue": "[\n    { id: 1, label: 'Canada' },\n    { id: 2, label: 'Older than 55' },\n    { id: 3, label: 'Employed' },\n    { id: 4, label: 'Added before 2018' },\n  ].map((value) => ({ value }))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyToken[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { SkyToken } from 'projects/indicators/src/public-api';\n\n@Component({\n  selector: 'sky-tokens-demo',\n  templateUrl: './tokens-demo.component.html',\n})\nexport class SkyTokensDemoComponent {\n  public colors: SkyToken[] = [\n    { id: 1, name: 'Black' },\n    { id: 2, name: 'Blue' },\n    { id: 3, name: 'Brown' },\n    { id: 4, name: 'Green' },\n    { id: 5, name: 'Orange' },\n    { id: 6, name: 'Pink' },\n    { id: 7, name: 'Purple' },\n    { id: 8, name: 'Red' },\n    { id: 9, name: 'Turquoise' },\n    { id: 10, name: 'White' },\n    { id: 11, name: 'Yellow' },\n  ].map((value) => ({ value }));\n\n  public filters: SkyToken[] = [\n    { id: 1, label: 'Canada' },\n    { id: 2, label: 'Older than 55' },\n    { id: 3, label: 'Employed' },\n    { id: 4, label: 'Added before 2018' },\n  ].map((value) => ({ value }));\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div class=\"sky-tokens-demo\">\n  <p>\n    <sky-tokens trackWith=\"id\" [tokens]=\"colors\"> </sky-tokens>\n  </p>\n\n  <p>\n    <sky-tokens trackWith=\"id\" [dismissible]=\"false\" [tokens]=\"colors\">\n    </sky-tokens>\n  </p>\n\n  <p>\n    <sky-tokens trackWith=\"id\" [disabled]=\"true\" [tokens]=\"colors\">\n    </sky-tokens>\n  </p>\n\n  <p>\n    <sky-tokens displayWith=\"label\" trackWith=\"id\" [tokens]=\"filters\">\n      (You may also include content inside the tokens component.)\n    </sky-tokens>\n  </p>\n</div>\n"
        },
        {
            "name": "SkyTokensTestComponent",
            "id": "component-SkyTokensTestComponent-b609e12bb889654b45770ba119ea70d57bcaf5bca4ea50354a57b3704abadd498cbe93d78bbaab17773994bcb6941e71aa1853b6cbdb51e9586aa88d61ec9861",
            "file": "projects/indicators/src/modules/tokens/fixtures/tokens.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-tokens-test",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tokens.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "data",
                    "defaultValue": "[{ name: 'Red' }, { name: 'White' }, { name: 'Blue' }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dismissible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "displayWith",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focusable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "includeSingleToken",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "messageStream",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<SkyTokensMessage>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyToken[]",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokensComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyTokensComponent",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SkyTokensComponent"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokensElementRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SkyTokensComponent, {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "trackWith",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onFocusIndexOverRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onFocusIndexUnderRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTokenSelected",
                    "args": [
                        {
                            "name": "args",
                            "type": "SkyTokenSelectedEventArgs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "SkyTokenSelectedEventArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "publishMessageStream",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "publishTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { SkyToken } from '../types/token';\n\nimport { SkyTokenSelectedEventArgs } from '../types/token-selected-event-args';\n\nimport { SkyTokensMessage } from '../types/tokens-message';\n\nimport { SkyTokensComponent } from '../tokens.component';\n\n@Component({\n  selector: 'sky-tokens-test',\n  templateUrl: './tokens.component.fixture.html',\n})\nexport class SkyTokensTestComponent implements OnDestroy {\n  @ViewChild(SkyTokensComponent, { read: ElementRef })\n  public tokensElementRef: ElementRef;\n\n  @ViewChild(SkyTokensComponent)\n  public tokensComponent: SkyTokensComponent;\n\n  public ariaLabel: string;\n  public disabled: boolean;\n  public dismissible: boolean;\n  public displayWith: string;\n  public focusable: boolean;\n  public messageStream: Subject<SkyTokensMessage>;\n  public tokens: SkyToken[];\n  public trackWith: string;\n\n  public includeSingleToken = false;\n\n  public data: any[] = [{ name: 'Red' }, { name: 'White' }, { name: 'Blue' }];\n\n  public ngOnDestroy(): void {\n    if (this.messageStream) {\n      this.messageStream.complete();\n    }\n  }\n\n  public onFocusIndexOverRange(): void {}\n\n  public onFocusIndexUnderRange(): void {}\n\n  public onTokenSelected(args: SkyTokenSelectedEventArgs): void {}\n\n  public publishTokens(): void {\n    this.tokens = this.data.map((value) => ({ value }));\n  }\n\n  public publishMessageStream(): void {\n    if (this.messageStream) {\n      this.messageStream.unsubscribe();\n    }\n\n    this.messageStream = new Subject<SkyTokensMessage>();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnDestroy"
            ],
            "templateData": "<sky-tokens\n  [disabled]=\"disabled\"\n  [dismissible]=\"dismissible\"\n  [displayWith]=\"displayWith\"\n  [focusable]=\"focusable\"\n  [messageStream]=\"messageStream\"\n  [trackWith]=\"trackWith\"\n  [(tokens)]=\"tokens\"\n  (focusIndexOverRange)=\"onFocusIndexOverRange()\"\n  (focusIndexUnderRange)=\"onFocusIndexUnderRange()\"\n  (tokenSelected)=\"onTokenSelected($event)\"\n>\n  INNER CONTENT\n</sky-tokens>\n\n<sky-token *ngIf=\"includeSingleToken\" [ariaLabel]=\"ariaLabel\"> </sky-token>\n"
        },
        {
            "name": "SkyWaitComponent",
            "id": "component-SkyWaitComponent-e4ff4e7877ff83eea2a0b214a4542f96dd578695547a28dc4184d165f02e735c1303028cdbe26f1b2e1fbbb642a5ade11362b8cfa5d422d4d891a0ac449fa702",
            "file": "projects/indicators/src/modules/wait/wait.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "SkyWaitAdapterService"
                }
            ],
            "selector": "sky-wait",
            "styleUrls": [
                "./wait.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wait.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSpecifies an ARIA label for the wait icon while an element or page loads.\nThis sets the icon's `aria-label` attribute\n[to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility).\nThe default value varies based on whether the wait is for an element or a page\nand whether it is a blocking wait. For example, the default for a page-blocking\nwait is \"Page loading. Please wait.\"\n",
                    "description": "<p>Specifies an ARIA label for the wait icon while an element or page loads.\nThis sets the icon&#39;s <code>aria-label</code> attribute\n<a href=\"https://developer.blackbaud.com/skyux/learn/accessibility\">to support accessibility</a>.\nThe default value varies based on whether the wait is for an element or a page\nand whether it is a blocking wait. For example, the default for a page-blocking\nwait is &quot;Page loading. Please wait.&quot;</p>\n",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "isFullPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 1853,
                            "end": 1871,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 1854,
                                "end": 1861,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhen set to `true`, wait indication appears on the page level instead of the\nparent element level. We recommend that you use the `beginBlockingPageWait` or\n`beginNonBlockingPageWait` functions of the `SkyWaitService` instead of setting this\non the component level.\n",
                    "description": "<p>When set to <code>true</code>, wait indication appears on the page level instead of the\nparent element level. We recommend that you use the <code>beginBlockingPageWait</code> or\n<code>beginNonBlockingPageWait</code> functions of the <code>SkyWaitService</code> instead of setting this\non the component level.</p>\n",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isNonBlocking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2404,
                            "end": 2422,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2405,
                                "end": 2412,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nWhen set to `true`, wait indication appears in the bottom left corner of the element\ninstead of hiding the entire parent element.\n",
                    "description": "<p>When set to <code>true</code>, wait indication appears in the bottom left corner of the element\ninstead of hiding the entire parent element.</p>\n",
                    "line": 84,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isWaiting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhen set to `true`, wait indication appears on the parent element of the `sky-wait` component.\n",
                    "description": "<p>When set to <code>true</code>, wait indication appears on the parent element of the <code>sky-wait</code> component.</p>\n",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_isFullPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_isWaiting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "ariaLabelStream",
                    "defaultValue": "new BehaviorSubject<string>('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`sky-wait-${++nextId}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "publishAriaLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, OnInit, Optional } from '@angular/core';\n\nimport { SkyLibResourcesService } from '@skyux/i18n';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { SkyWaitAdapterService } from './wait-adapter.service';\n\nlet nextId = 0;\n\n@Component({\n  selector: 'sky-wait',\n  templateUrl: './wait.component.html',\n  styleUrls: ['./wait.component.scss'],\n  providers: [SkyWaitAdapterService],\n})\nexport class SkyWaitComponent implements OnInit {\n  /**\n   * Specifies an ARIA label for the wait icon while an element or page loads.\n   * This sets the icon's `aria-label` attribute\n   * [to support accessibility](https://developer.blackbaud.com/skyux/learn/accessibility).\n   * The default value varies based on whether the wait is for an element or a page\n   * and whether it is a blocking wait. For example, the default for a page-blocking\n   * wait is \"Page loading. Please wait.\"\n   */\n  @Input()\n  public ariaLabel: string;\n\n  /**\n   * When set to `true`, wait indication appears on the parent element of the `sky-wait` component.\n   */\n  @Input()\n  public set isWaiting(value: boolean) {\n    if (value && !this._isFullPage) {\n      this.adapterService.setWaitBounds(this.elRef);\n    } else if (!value && !this._isFullPage) {\n      this.adapterService.removeWaitBounds(this.elRef);\n    }\n\n    this.adapterService.setBusyState(\n      this.elRef,\n      this.isFullPage,\n      value,\n      this.isNonBlocking,\n      this.id\n    );\n\n    this._isWaiting = value;\n  }\n\n  public get isWaiting(): boolean {\n    return this._isWaiting;\n  }\n\n  /**\n   * When set to `true`, wait indication appears on the page level instead of the\n   * parent element level. We recommend that you use the `beginBlockingPageWait` or\n   * `beginNonBlockingPageWait` functions of the `SkyWaitService` instead of setting this\n   * on the component level.\n   * @default false\n   */\n  @Input()\n  public set isFullPage(value: boolean) {\n    /* istanbul ignore else: untestable */\n    if (value) {\n      this.adapterService.removeWaitBounds(this.elRef);\n    } else if (!value && this._isWaiting) {\n      this.adapterService.setWaitBounds(this.elRef);\n    }\n\n    this._isFullPage = value;\n  }\n\n  public get isFullPage(): boolean {\n    return this._isFullPage;\n  }\n\n  /**\n   * When set to `true`, wait indication appears in the bottom left corner of the element\n   * instead of hiding the entire parent element.\n   * @default false\n   */\n  @Input()\n  public isNonBlocking: boolean;\n\n  public ariaLabelStream = new BehaviorSubject<string>('');\n\n  private id = `sky-wait-${++nextId}`;\n  private _isFullPage: boolean;\n  private _isWaiting: boolean;\n\n  constructor(\n    private elRef: ElementRef,\n    private adapterService: SkyWaitAdapterService,\n    @Optional() private resourceService: SkyLibResourcesService\n  ) {}\n\n  public ngOnInit(): void {\n    this.publishAriaLabel();\n  }\n\n  private publishAriaLabel(): void {\n    if (this.ariaLabel) {\n      this.ariaLabelStream.next(this.ariaLabel);\n      return;\n    }\n\n    /* istanbul ignore else */\n    if (this.resourceService) {\n      const type = this.isFullPage ? '_page' : '';\n      const blocking = this.isNonBlocking ? '' : '_blocking';\n      const key = `skyux_wait${type}${blocking}_aria_alt_text`;\n      this.resourceService.getString(key).subscribe((value: string) => {\n        this.ariaLabelStream.next(value);\n      });\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'scss/variables';\n\n.sky-wait-mask-loading-blocking {\n  margin: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  background-color: $sky-wait-mask-color;\n  z-index: $sky-component-wait-z-index;\n}\n\n.sky-wait-mask-loading-fixed {\n  position: fixed;\n}\n\n.sky-wait {\n  width: 50px;\n  height: 50px;\n  margin-top: -25px;\n  margin-left: -25px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n}\n\n.sky-wait-mask-loading-non-blocking {\n  bottom: 0;\n\n  .sky-wait {\n    top: auto;\n    right: auto;\n    bottom: 0;\n    left: 0;\n    margin-left: auto;\n    margin-right: auto;\n  }\n}\n\n.sky-wait-double-bounce1,\n.sky-wait-double-bounce2 {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background-color: $sky-wait-color;\n  opacity: 0.6;\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-animation: sk-bounce 2s infinite ease-in-out;\n  animation: sk-bounce 2s infinite ease-in-out;\n}\n\n.sky-wait-double-bounce2 {\n  -webkit-animation-delay: -1s;\n  animation-delay: -1s;\n}\n\n@-webkit-keyframes sk-bounce {\n  0%,\n  100% {\n    -webkit-transform: scale(0);\n  }\n\n  50% {\n    -webkit-transform: scale(1);\n  }\n}\n\n@keyframes sk-bounce {\n  0%,\n  100% {\n    transform: scale(0);\n    -webkit-transform: scale(0);\n  }\n\n  50% {\n    transform: scale(1);\n    -webkit-transform: scale(1);\n  }\n}\n\n.sky-wait-container.sky-wait-active {\n  position: relative;\n}\n",
                    "styleUrl": "./wait.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "adapterService",
                        "type": "SkyWaitAdapterService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resourceService",
                        "type": "SkyLibResourcesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 90,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "adapterService",
                        "type": "SkyWaitAdapterService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resourceService",
                        "type": "SkyLibResourcesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isWaiting": {
                    "name": "isWaiting",
                    "setSignature": {
                        "name": "isWaiting",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "rawdescription": "\n\nWhen set to `true`, wait indication appears on the parent element of the `sky-wait` component.\n",
                        "description": "<p>When set to <code>true</code>, wait indication appears on the parent element of the <code>sky-wait</code> component.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isWaiting",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                },
                "isFullPage": {
                    "name": "isFullPage",
                    "setSignature": {
                        "name": "isFullPage",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 63,
                        "rawdescription": "\n\nWhen set to `true`, wait indication appears on the page level instead of the\nparent element level. We recommend that you use the `beginBlockingPageWait` or\n`beginNonBlockingPageWait` functions of the `SkyWaitService` instead of setting this\non the component level.\n",
                        "description": "<p>When set to <code>true</code>, wait indication appears on the page level instead of the\nparent element level. We recommend that you use the <code>beginBlockingPageWait</code> or\n<code>beginNonBlockingPageWait</code> functions of the <code>SkyWaitService</code> instead of setting this\non the component level.</p>\n",
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "isFullPage",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 74
                    }
                }
            },
            "templateData": "<div class=\"sky-wait-container\">\n  <div\n    *ngIf=\"isWaiting\"\n    class=\"sky-wait-mask\"\n    [attr.aria-label]=\"ariaLabelStream | async\"\n    [ngClass]=\"{\n      'sky-wait-mask-loading-fixed': isFullPage,\n      'sky-wait-mask-loading-non-blocking': isNonBlocking,\n      'sky-wait-mask-loading-blocking': !isNonBlocking\n    }\"\n  >\n    <div class=\"sky-wait\">\n      <div class=\"sky-wait-double-bounce1\"></div>\n      <div class=\"sky-wait-double-bounce2\"></div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "SkyWaitDemoComponent",
            "id": "component-SkyWaitDemoComponent-123746a29e29a25d19b210b107e75e8a5700b173f79695b4c57eacf5cb9f5b3dc742746157fe1f7acc327a0e388e7c4f8aeb0456da1319d3b97554ce45c10157",
            "file": "projects/indicators-showcase/src/app/visual/wait/wait-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-wait-demo",
            "styleUrls": [
                "./wait-demo.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wait-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFullPageWaiting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isNonBlocking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isWaiting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-wait-demo',\n  templateUrl: './wait-demo.component.html',\n  styleUrls: ['./wait-demo.component.scss'],\n})\nexport class SkyWaitDemoComponent {\n  public isWaiting: boolean;\n  public isFullPageWaiting: boolean;\n  public isNonBlocking: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host ::ng-deep {\n  .sky-wait-double-bounce1,\n  .sky-wait-double-bounce2 {\n    animation-play-state: paused !important;\n  }\n}\n",
                    "styleUrl": "./wait-demo.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"sky-wait-demo\">\n  <button\n    class=\"sky-btn sky-btn-secondary sky-test-wait\"\n    type=\"button\"\n    [ngClass]=\"{\n      'sky-btn-secondary': !isWaiting,\n      'sky-btn-primary': isWaiting\n    }\"\n    (click)=\"isWaiting = !isWaiting\"\n  >\n    Toggle wait\n  </button>\n\n  <button\n    class=\"sky-btn sky-btn-secondary sky-test-full-page\"\n    type=\"button\"\n    [ngClass]=\"{\n      'sky-btn-secondary': !isFullPageWaiting,\n      'sky-btn-primary': isFullPageWaiting\n    }\"\n    (click)=\"isFullPageWaiting = !isFullPageWaiting\"\n  >\n    Toggle full page wait\n  </button>\n\n  <button\n    class=\"sky-btn sky-btn-secondary sky-test-non-blocking\"\n    style=\"margin-bottom: 10px\"\n    type=\"button\"\n    [ngClass]=\"{\n      'sky-btn-secondary': isNonBlocking,\n      'sky-btn-primary': !isNonBlocking\n    }\"\n    (click)=\"isNonBlocking = !isNonBlocking\"\n  >\n    Toggle blocking\n  </button>\n\n  <div class=\"sky-wait-demo-parent\" style=\"width: 500px; height: 500px\">\n    <div style=\"height: 200px; width: 200px\">\n      Wait <a href=\"http://example.com\">link</a> inside this element with text\n      <sky-wait [isNonBlocking]=\"isNonBlocking\" [isWaiting]=\"isWaiting\">\n      </sky-wait>\n    </div>\n  </div>\n\n  <div\n    class=\"sky-wait-demo-absolute\"\n    style=\"height: 200px; width: 200px; margin-top: 10px\"\n  >\n    <sky-wait [isWaiting]=\"isWaiting\"> </sky-wait>\n    <div>\n      <p style=\"position: absolute; background-color: red\">\n        A large area that can be waited with the <code>sky-wait</code> directive\n        and a <a href=\"http://example.com\">link</a>.\n      </p>\n    </div>\n  </div>\n\n  <div\n    class=\"sky-wait-demo-absolute-behind\"\n    style=\"height: 200px; width: 200px; margin-top: 10px\"\n  >\n    <sky-wait [isWaiting]=\"isWaiting\"> </sky-wait>\n    <div>\n      <p\n        style=\"\n          position: absolute;\n          background-color: red;\n          z-index: 1040;\n          color: #000;\n        \"\n      >\n        A large area that can be waited with the <code>sky-wait</code> directive\n        and a <a href=\"http://example.com\">link</a>.\n      </p>\n    </div>\n  </div>\n</div>\n<sky-wait\n  [isWaiting]=\"isFullPageWaiting\"\n  [isFullPage]=\"true\"\n  [isNonBlocking]=\"isNonBlocking\"\n>\n</sky-wait>\n\n<button class=\"sky-btn sky-btn-secondary\">\n  I am a button that does nothing, but you can tab navigate to and from me\n</button>\n"
        },
        {
            "name": "SkyWaitPageComponent",
            "id": "component-SkyWaitPageComponent-2aef9d2cf925632c713fa552511137a9b9e11e9df6685855f7439f696645c0195043941f9eb62774259c8c4827101e5c1dfbc9879079db0f4c4a76143baf45ef",
            "file": "projects/indicators/src/modules/wait/wait-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-wait-page",
            "styleUrls": [
                "./wait-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./wait-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hasBlockingWait",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hasNonBlockingWait",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n/**\n * @internal\n */\n@Component({\n  selector: 'sky-wait-page',\n  templateUrl: './wait-page.component.html',\n  styleUrls: ['./wait-page.component.scss'],\n})\nexport class SkyWaitPageComponent {\n  @Input()\n  public hasBlockingWait: boolean;\n\n  @Input()\n  public hasNonBlockingWait: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '~@skyux/theme/scss/mixins';\n@import '~@skyux/theme/scss/_compat/mixins';\n\n.sky-wait-page ::ng-deep .sky-wait-mask-loading-fixed {\n  z-index: $sky-page-wait-z-index;\n}\n",
                    "styleUrl": "./wait-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"sky-wait-page\">\n  <sky-wait\n    [isFullPage]=\"true\"\n    [isNonBlocking]=\"true\"\n    [isWaiting]=\"hasNonBlockingWait\"\n  >\n  </sky-wait>\n  <sky-wait [isFullPage]=\"true\" [isWaiting]=\"hasBlockingWait\"> </sky-wait>\n</div>\n"
        },
        {
            "name": "SkyWaitTestComponent",
            "id": "component-SkyWaitTestComponent-7777acf2f131e52bdedbdea8280b0abbfeabd0e4b7f5be5e4b6ccff1aff8f976df163ce10c4753e9be0b135b399f7935b1d12dbf0de57e36a5d8825d4e3e98da",
            "file": "projects/indicators/src/modules/wait/fixtures/wait.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./wait.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "anchor0Display",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "anchor0Visibility",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "anchor2Display",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "anchor2Visibility",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFullPage",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isNonBlocking",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isWaiting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "secondWaitIsWaiting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showAnchor0",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showAnchor2",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "waitComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyWaitComponent",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "SkyWaitComponent"
                        }
                    ],
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "endBlockingWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "endNonBlockingWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startBlockingWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "startNonBlockingWait",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild } from '@angular/core';\n\nimport { SkyWaitComponent } from '../wait.component';\n\nimport { SkyWaitService } from '../wait.service';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './wait.component.fixture.html',\n})\nexport class SkyWaitTestComponent {\n  public ariaLabel: string;\n\n  public isWaiting = false;\n  public isFullPage = false;\n  public isNonBlocking = false;\n\n  public showAnchor0 = true;\n  public showAnchor2 = true;\n\n  public anchor0Visibility = '';\n  public anchor0Display = '';\n\n  public anchor2Visibility = '';\n  public anchor2Display = '';\n\n  public secondWaitIsWaiting = false;\n\n  @ViewChild(SkyWaitComponent)\n  public waitComponent: SkyWaitComponent;\n\n  constructor(private waitService: SkyWaitService) {}\n\n  public endBlockingWait(): void {\n    this.waitService.endBlockingPageWait();\n  }\n\n  public endNonBlockingWait(): void {\n    this.waitService.endNonBlockingPageWait();\n  }\n\n  public startBlockingWait(): void {\n    this.waitService.beginBlockingPageWait();\n  }\n\n  public startNonBlockingWait(): void {\n    this.waitService.beginNonBlockingPageWait();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "waitService",
                        "type": "SkyWaitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "waitService",
                        "type": "SkyWaitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<button\n  *ngIf=\"showAnchor0\"\n  class=\"sky-btn sky-btn-secondary\"\n  href=\"/\"\n  id=\"anchor-0\"\n  [ngStyle]=\"{\n    'display': anchor0Display,\n    'visibility': anchor0Visibility\n  }\"\n>\n  Anchor tag 0\n</button>\n<button class=\"sky-btn sky-btn-secondary\" href=\"/\" id=\"anchor-1\">\n  Anchor tag 1\n</button>\n<div class=\"sky-wait-test-component\">\n  <button class=\"sky-btn sky-btn-primary\" id=\"inside-button\">\n    I am button\n  </button>\n  <sky-wait\n    [ariaLabel]=\"ariaLabel\"\n    [isFullPage]=\"isFullPage\"\n    [isNonBlocking]=\"isNonBlocking\"\n    [isWaiting]=\"isWaiting\"\n  >\n  </sky-wait>\n</div>\n<div>\n  <button\n    *ngIf=\"showAnchor2\"\n    class=\"sky-btn sky-btn-secondary\"\n    href=\"/\"\n    id=\"anchor-2\"\n    [ngStyle]=\"{\n      'display': anchor2Display,\n      'visibility': anchor2Visibility\n    }\"\n  >\n    Anchor tag 2\n  </button>\n  <sky-wait\n    [isFullPage]=\"false\"\n    [isNonBlocking]=\"false\"\n    [isWaiting]=\"secondWaitIsWaiting\"\n  >\n  </sky-wait>\n</div>\n"
        },
        {
            "name": "StatusIndicatorDemoComponent",
            "id": "component-StatusIndicatorDemoComponent-0fabb6c82d1c205a87750c5e3ebc226d8696994994d5b90958558d6315991b43042527502c6045d9e8d71f5db70de83b0e09723080ee3e56640ce5199eb3d65d",
            "file": "projects/indicators/documentation/code-examples/status-indicator/basic/status-indicator-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-status-indicator-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./status-indicator-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-status-indicator-demo',\n  templateUrl: './status-indicator-demo.component.html',\n})\nexport class StatusIndicatorDemoComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-status-indicator descriptionType=\"none\" indicatorType=\"danger\">\n  Danger status indicator\n</sky-status-indicator>\n<sky-status-indicator descriptionType=\"important-info\" indicatorType=\"info\">\n  Info status indicator\n</sky-status-indicator>\n<sky-status-indicator descriptionType=\"none\" indicatorType=\"success\">\n  Success status indicator\n</sky-status-indicator>\n<sky-status-indicator descriptionType=\"none\" indicatorType=\"warning\">\n  Warning status indicator\n</sky-status-indicator>\n"
        },
        {
            "name": "StatusIndicatorTestComponent",
            "id": "component-StatusIndicatorTestComponent-3b7d767f75f51a5aeb68c2fcd3abd0bc7e2b1869857c33b49beda6094b7ae7fc5952c7635e2a90df3376627cc330502938ed96e93368685384b6a2c2bdaaf1d6",
            "file": "projects/indicators/src/modules/status-indicator/fixtures/status-indicator.component.fixture.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-test-cmp",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./status-indicator.component.fixture.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "customDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "descriptionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "indicatorType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-test-cmp',\n  templateUrl: './status-indicator.component.fixture.html',\n})\nexport class StatusIndicatorTestComponent {\n  public customDescription: string;\n\n  public descriptionType: string;\n\n  public indicatorType: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-status-indicator\n  [customDescription]=\"customDescription\"\n  [descriptionType]=\"descriptionType\"\n  [indicatorType]=\"indicatorType\"\n>\n  Indicator text\n</sky-status-indicator>\n"
        },
        {
            "name": "StatusIndicatorVisualComponent",
            "id": "component-StatusIndicatorVisualComponent-3cec7a77f70135d8b51986324c76480095133eba4c25c298b85944475468cef5c8861a933e0d32de6ab20a652883369574289cfc0d21a52dc92189bd8c7a6f5e",
            "file": "projects/indicators-showcase/src/app/visual/status-indicator/status-indicator-visual.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sky-status-indicator-visual",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./status-indicator-visual.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sky-status-indicator-visual',\n  templateUrl: './status-indicator-visual.component.html',\n})\nexport class StatusIndicatorVisualComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<sky-e2e-theme-selector></sky-e2e-theme-selector>\n\n<div class=\"sky-status-indicator-visual\">\n  <sky-status-indicator descriptionType=\"none\" indicatorType=\"danger\">\n    Danger\n  </sky-status-indicator>\n  <sky-status-indicator descriptionType=\"important-info\" indicatorType=\"info\">\n    Info\n  </sky-status-indicator>\n  <sky-status-indicator descriptionType=\"none\" indicatorType=\"success\">\n    Success\n  </sky-status-indicator>\n  <sky-status-indicator descriptionType=\"none\" indicatorType=\"warning\">\n    Warning\n  </sky-status-indicator>\n</div>\n<div class=\"sky-status-indicator-visual-wrap\">\n  <sky-status-indicator descriptionType=\"none\" indicatorType=\"danger\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </sky-status-indicator>\n</div>\n"
        },
        {
            "name": "TextHighlightDemoComponent",
            "id": "component-TextHighlightDemoComponent-6fe46a62f861eb509ea98ccbf30b98b9bcccdc2c73a4e97e29998be145b2e853ccdfd1d90d95d570ca2d014dc7d3947107f9c03846ab86d3f52cac949a7fc324",
            "file": "projects/indicators/documentation/code-examples/text-highlight/basic/text-highlight-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-highlight-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./text-highlight-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "searchTerm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showAdditionalContent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-text-highlight-demo',\n  templateUrl: './text-highlight-demo.component.html',\n})\nexport class TextHighlightDemoComponent {\n  public searchTerm: string;\n\n  public showAdditionalContent: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<div class=\"sky-form-group\" style=\"width: 200px\">\n  <label [for]=\"searchTermInput.id\" class=\"sky-control-label\">\n    Text to highlight\n  </label>\n  <br />\n  <input\n    class=\"sky-form-control\"\n    id=\"sky-demo-search-term\"\n    skyId\n    type=\"text\"\n    [(ngModel)]=\"searchTerm\"\n    #searchTermInput=\"skyId\"\n  />\n</div>\n\n<div class=\"sky-margin-stacked-default\">\n  <sky-checkbox [(ngModel)]=\"showAdditionalContent\">\n    <sky-checkbox-label> Display additional content </sky-checkbox-label>\n  </sky-checkbox>\n</div>\n\n<div [skyHighlight]=\"searchTerm\">\n  The text that you enter is highlighted here.\n  <div *ngIf=\"showAdditionalContent\">\n    This additional content is highlighted too!\n  </div>\n</div>\n"
        },
        {
            "name": "TokensDemoComponent",
            "id": "component-TokensDemoComponent-ff640ea798efd15ac4e71ea6da7f06ab763cde1608bd8dac3ef706db93f44ab538342827b866a333c788e082e4729818efdcb1ef2fc9c6f3b3635be1ed1363c2",
            "file": "projects/indicators/documentation/code-examples/tokens/basic/tokens-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tokens-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tokens-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "colors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyToken[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "defaultColors",
                    "defaultValue": "[\n    { name: 'Red' },\n    { name: 'Black' },\n    { name: 'Blue' },\n    { name: 'Brown' },\n    { name: 'Green' },\n    { name: 'Orange' },\n    { name: 'Pink' },\n    { name: 'Purple' },\n    { name: 'Turquoise' },\n    { name: 'White' },\n    { name: 'Yellow' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getTokens",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SkyToken[]",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { SkyToken } from '@skyux/indicators';\n\n@Component({\n  selector: 'app-tokens-demo',\n  templateUrl: './tokens-demo.component.html',\n})\nexport class TokensDemoComponent {\n  public colors: SkyToken[];\n\n  private defaultColors = [\n    { name: 'Red' },\n    { name: 'Black' },\n    { name: 'Blue' },\n    { name: 'Brown' },\n    { name: 'Green' },\n    { name: 'Orange' },\n    { name: 'Pink' },\n    { name: 'Purple' },\n    { name: 'Turquoise' },\n    { name: 'White' },\n    { name: 'Yellow' },\n  ];\n\n  constructor() {\n    this.colors = this.getTokens(this.defaultColors);\n  }\n\n  private getTokens(data: any[]): SkyToken[] {\n    return data.map((item: any) => {\n      return {\n        value: item,\n      } as SkyToken;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "templateData": "<sky-tokens [(tokens)]=\"colors\"> </sky-tokens>\n"
        },
        {
            "name": "TokensDemoComponent",
            "id": "component-TokensDemoComponent-80f3d5f57101135c666f81bc67a82d51705116d4f98c20880f51cbd4f1e5cbe9052a2eeb96a5cc1ff82f1aa8948263950b34784beb7176303150beb428818be6-1",
            "file": "projects/indicators/documentation/code-examples/tokens/custom/tokens-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tokens-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tokens-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "defaultTokens",
                    "defaultValue": "[\n    { label: 'Canada' },\n    { label: 'Older than 55' },\n    { label: 'Employed' },\n    { label: 'Added before 2018' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "myTokens",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyToken[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokensController",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subject<SkyTokensMessage>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "createTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "destroyTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "focusLastToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getTokens",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SkyToken[]",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onFocusIndexOverRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onFocusIndexUnderRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTokenSelected",
                    "args": [
                        {
                            "name": "args",
                            "type": "SkyTokenSelectedEventArgs",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "args",
                            "type": "SkyTokenSelectedEventArgs",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy } from '@angular/core';\n\nimport {\n  SkyToken,\n  SkyTokenSelectedEventArgs,\n  SkyTokensMessage,\n  SkyTokensMessageType,\n} from '@skyux/indicators';\n\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-tokens-demo',\n  templateUrl: './tokens-demo.component.html',\n})\nexport class TokensDemoComponent implements OnDestroy {\n  public myTokens: SkyToken[];\n\n  private defaultTokens = [\n    { label: 'Canada' },\n    { label: 'Older than 55' },\n    { label: 'Employed' },\n    { label: 'Added before 2018' },\n  ];\n\n  public tokensController: Subject<SkyTokensMessage>;\n\n  constructor() {\n    this.myTokens = this.getTokens(this.defaultTokens);\n  }\n\n  public ngOnDestroy(): void {\n    if (this.tokensController) {\n      this.tokensController.complete();\n    }\n  }\n\n  public resetTokens(): void {\n    this.createTokens();\n  }\n\n  public changeTokens(): void {\n    this.myTokens = this.getTokens([\n      { label: 'Paid' },\n      { label: 'Pending' },\n      { label: 'Past due' },\n    ]);\n  }\n\n  public destroyTokens(): void {\n    this.myTokens = undefined;\n  }\n\n  public createTokens(): void {\n    this.myTokens = this.getTokens(this.defaultTokens);\n  }\n\n  public onTokenSelected(args: SkyTokenSelectedEventArgs): void {\n    console.log('Token selected:', args);\n  }\n\n  public onFocusIndexUnderRange(): void {\n    console.log('Focus index was less than zero.');\n  }\n\n  public onFocusIndexOverRange(): void {\n    console.log('Focus index was greater than the number of tokens.');\n  }\n\n  public focusLastToken(): void {\n    if (!this.tokensController) {\n      this.tokensController = new Subject<SkyTokensMessage>();\n    }\n\n    this.tokensController.next({\n      type: SkyTokensMessageType.FocusLastToken,\n    });\n  }\n\n  private getTokens(data: any[]): SkyToken[] {\n    return data.map((item: any) => {\n      return {\n        value: item,\n      } as SkyToken;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TokensDemoComponent-1",
            "templateData": "<p>\n  These tokens define a custom property to display their values. When users\n  select a token, it emits an event.\n</p>\n\n<p>\n  <sky-tokens\n    displayWith=\"label\"\n    [messageStream]=\"tokensController\"\n    (focusIndexOverRange)=\"onFocusIndexOverRange()\"\n    (focusIndexUnderRange)=\"onFocusIndexUnderRange()\"\n    (tokenSelected)=\"onTokenSelected($event)\"\n    [(tokens)]=\"myTokens\"\n  >\n    (You may also include content inside the tokens component.)\n  </sky-tokens>\n</p>\n\n<p>\n  <button\n    class=\"sky-btn sky-btn-default sky-margin-inline-default\"\n    type=\"button\"\n    (click)=\"changeTokens()\"\n  >\n    Change tokens\n  </button>\n\n  <button\n    class=\"sky-btn sky-btn-default sky-margin-inline-default\"\n    type=\"button\"\n    (click)=\"resetTokens()\"\n  >\n    Reset tokens\n  </button>\n\n  <button\n    class=\"sky-btn sky-btn-default sky-margin-inline-default\"\n    type=\"button\"\n    (click)=\"destroyTokens()\"\n  >\n    Destroy tokens\n  </button>\n  <button\n    class=\"sky-btn sky-btn-default sky-margin-inline-default\"\n    (click)=\"focusLastToken()\"\n  >\n    Focus last token\n  </button>\n</p>\n"
        },
        {
            "name": "VisualComponent",
            "id": "component-VisualComponent-0c70a2967cca9bd7147b70356cc0c6845fbcbda96e92f5f160f5a5885042b499415865cd96483b02d60a73568c8c4e3bbdfe18f7395522f678111a55a9b6a926",
            "file": "projects/indicators-showcase/src/app/visual/visual.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-visual",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./visual.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-visual',\n  templateUrl: './visual.component.html',\n})\nexport class VisualComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<h1>Visual tests</h1>\n\n<ul>\n  <li>\n    <a routerLink=\"visual/alert\">Alert</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/chevron\">Chevron</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/help-inline\">Help inline</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/icon\">Icon</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/icon-stack\">Icon stack</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/key-info\">key-info</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/label\">Label</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/status-indicator\">Status indicator</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/text-highlight\">Text highlight</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/tokens\">Tokens</a>\n  </li>\n  <li>\n    <a routerLink=\"visual/wait\">Wait</a>\n  </li>\n</ul>\n"
        },
        {
            "name": "WaitDemoComponent",
            "id": "component-WaitDemoComponent-13584b71c7eee5bdc4ac724c319c486cdac99f9ff33538b6f8dcaf452c1bbdb5f423d803f64d6eefb5d206f6968aead2ebf1aa21873c7cd150d3faf5741ccdd0",
            "file": "projects/indicators/documentation/code-examples/wait/element/wait-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wait-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./wait-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isWaiting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-wait-demo',\n  templateUrl: './wait-demo.component.html',\n})\nexport class WaitDemoComponent {\n  public isWaiting: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<button\n  type=\"button\"\n  class=\"sky-btn sky-btn-default\"\n  (click)=\"isWaiting = !isWaiting\"\n>\n  Toggle wait\n</button>\n\n<div style=\"height: 200px; width: 200px; margin: 10px\">\n  The <code>sky-wait</code> directive can apply to a large area.\n  <sky-wait [isWaiting]=\"isWaiting\"> </sky-wait>\n</div>\n"
        },
        {
            "name": "WaitDemoComponent",
            "id": "component-WaitDemoComponent-abe99a905f79b459e3d17705a854dc3c34715e9f7cc932c2abf8128c1d8942c6cb4f209110a010426fb6ad3012ca981a47e4d058be3afe30b0d21ae851a2d0c7-1",
            "file": "projects/indicators/documentation/code-examples/wait/page/wait-demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-wait-demo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./wait-demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isWaiting",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "showPageWait",
                    "args": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "isBlocking",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\nimport { SkyWaitService } from '@skyux/indicators';\n\n@Component({\n  selector: 'app-wait-demo',\n  templateUrl: './wait-demo.component.html',\n})\nexport class WaitDemoComponent {\n  public isWaiting = false;\n\n  constructor(private waitSvc: SkyWaitService) {}\n\n  public showPageWait(isBlocking: boolean): void {\n    if (isBlocking) {\n      this.waitSvc.beginBlockingPageWait();\n      setTimeout(() => {\n        this.waitSvc.endBlockingPageWait();\n      }, 2000);\n    } else {\n      this.waitSvc.beginNonBlockingPageWait();\n      setTimeout(() => {\n        this.waitSvc.endNonBlockingPageWait();\n      }, 2000);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "waitSvc",
                        "type": "SkyWaitService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "waitSvc",
                        "type": "SkyWaitService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "WaitDemoComponent-1",
            "templateData": "<button\n  type=\"button\"\n  class=\"sky-btn sky-btn-default sky-margin-inline-default\"\n  (click)=\"showPageWait(true)\"\n>\n  Show page wait\n</button>\n\n<button\n  type=\"button\"\n  class=\"sky-btn sky-btn-default sky-margin-inline-default\"\n  (click)=\"showPageWait(false)\"\n>\n  Show non-blocking page wait\n</button>\n"
        }
    ],
    "modules": [
        {
            "name": "AlertDemoModule",
            "id": "module-AlertDemoModule-abe9ab4641ccc0d9f6a62d807e7fcd30417d613c66a3bee7b9a6f778b63e8c2d7a04f1938cd9a7210330cc471b29828624850fd3e9c464205893b54d1944f049",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/alert/basic/alert-demo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyAlertModule } from '@skyux/indicators';\n\nimport { AlertDemoComponent } from './alert-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyAlertModule],\n  declarations: [AlertDemoComponent],\n  exports: [AlertDemoComponent],\n})\nexport class AlertDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyAlertModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AlertDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-64ecf8699965cf9aef039e737f7b7faafe9e88aa4324f9bf675b19715934e8538ba4ff31e7e36349fa310a40b71758a0f46b3be135d645ba3f172a78c6ec5e3e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators-showcase/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SkyThemeService } from '@skyux/theme';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { VisualModule } from './visual/visual.module';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserAnimationsModule, AppRoutingModule, VisualModule],\n  providers: [SkyThemeService],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "VisualModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-510c226fd0c37a08b157a7fb8256184190ee4dc5e571e166bc1c2fa4ae6fbf855cac3e908d963b03dfa6881e40c2d9a5915193bd5f6b358df2dcbccdf08dbb59",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators-showcase/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AlertVisualComponent } from './visual/alert/alert-visual.component';\nimport { SkyChevronDemoComponent } from './visual/chevron/chevron-demo.component';\nimport { SkyHelpInlineDemoComponent } from './visual/help-inline/help-inline-demo.component';\nimport { SkyIconStackDemoComponent } from './visual/icon-stack/icon-stack-demo.component';\nimport { SkyIconDemoComponent } from './visual/icon/icon-demo.component';\nimport { KeyInfoVisualComponent } from './visual/key-info/key-info-visual.component';\nimport { SkyLabelDemoComponent } from './visual/label/label-demo.component';\nimport { StatusIndicatorVisualComponent } from './visual/status-indicator/status-indicator-visual.component';\nimport { SkyTextHighlightDemoComponent } from './visual/text-highlight/text-highlight-demo.component';\nimport { SkyTokensDemoComponent } from './visual/tokens/tokens-demo.component';\nimport { VisualComponent } from './visual/visual.component';\nimport { SkyWaitDemoComponent } from './visual/wait/wait-demo.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VisualComponent,\n  },\n  {\n    path: 'visual/alert',\n    component: AlertVisualComponent,\n  },\n  {\n    path: 'visual/chevron',\n    component: SkyChevronDemoComponent,\n  },\n  {\n    path: 'visual/help-inline',\n    component: SkyHelpInlineDemoComponent,\n  },\n  {\n    path: 'visual/icon',\n    component: SkyIconDemoComponent,\n  },\n  {\n    path: 'visual/icon-stack',\n    component: SkyIconStackDemoComponent,\n  },\n  {\n    path: 'visual/key-info',\n    component: KeyInfoVisualComponent,\n  },\n  {\n    path: 'visual/label',\n    component: SkyLabelDemoComponent,\n  },\n  {\n    path: 'visual/status-indicator',\n    component: StatusIndicatorVisualComponent,\n  },\n  {\n    path: 'visual/text-highlight',\n    component: SkyTextHighlightDemoComponent,\n  },\n  {\n    path: 'visual/tokens',\n    component: SkyTokensDemoComponent,\n  },\n  {\n    path: 'visual/wait',\n    component: SkyWaitDemoComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HelpInlineDemoModule",
            "id": "module-HelpInlineDemoModule-716d2a06e3aa3ebed513d7f27a02961be56964fffe87cee32d33438c3c07acff9fa31a0b04b6e602e31b4d1b07483bf4b547adf62a6c4aa577be579017799f23",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/help-inline/basic/help-inline-demo.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\n\nimport { NgModule } from '@angular/core';\n\nimport { SkyHelpInlineModule } from '@skyux/indicators';\n\nimport { HelpInlineDemoComponent } from './help-inline-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyHelpInlineModule],\n  exports: [HelpInlineDemoComponent],\n  declarations: [HelpInlineDemoComponent],\n})\nexport class HelpInlineDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HelpInlineDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyHelpInlineModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HelpInlineDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "IconDemoModule",
            "id": "module-IconDemoModule-77ebb3d88edca4554704bbeb8d055d593a19f165ff4ba9ade7b4db1ad99d212fb3989db9c1d3136050bfa7d2d66d888d8ddf1adac20b27e42eea31a761592aad",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/icon/icon-demo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyIconModule } from '@skyux/indicators';\n\nimport { IconDemoComponent } from './icon-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyIconModule],\n  declarations: [IconDemoComponent],\n  exports: [IconDemoComponent],\n})\nexport class IconDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "IconDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "IconDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "KeyInfoDemoModule",
            "id": "module-KeyInfoDemoModule-fb948fc269aa0dbe54f2ecf1bdd7309ef3f03a82a7bac568f485fc16d9d1c77638fa952d7f149daeba18d81847332eae7abfee306b697a6c381f27fcc61076ab",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/key-info/basic/key-info-demo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyKeyInfoModule } from '@skyux/indicators';\n\nimport { KeyInfoDemoComponent } from './key-info-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyKeyInfoModule],\n  declarations: [KeyInfoDemoComponent],\n  exports: [KeyInfoDemoComponent],\n})\nexport class KeyInfoDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "KeyInfoDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyKeyInfoModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "KeyInfoDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LabelDemoModule",
            "id": "module-LabelDemoModule-f39c62af6e0e51c49f7adf282c0ee91f21b05e620317742a4f478b5d6ef72cb71e6ecb5e9b121d6731b708717cc6ae98c1981986e0f686e0b01c860e113300ca",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/label/basic/label-demo.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\n\nimport { NgModule } from '@angular/core';\n\nimport { SkyLabelModule } from '@skyux/indicators';\n\nimport { LabelDemoComponent } from './label-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyLabelModule],\n  exports: [LabelDemoComponent],\n  declarations: [LabelDemoComponent],\n})\nexport class LabelDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LabelDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyLabelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LabelDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyAlertModule",
            "id": "module-SkyAlertModule-855b653fa3982a90170eb63bfe1cfc6750cf6d2fec1d233c903ac3565146788c49e49a4778748598b0acb1f3a21149f473862c2346140168215950081022d647",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/alert/alert.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyI18nModule } from '@skyux/i18n';\n\nimport { SkyIndicatorsResourcesModule } from '../shared/sky-indicators-resources.module';\n\nimport { SkyIconModule } from '../icon/icon.module';\n\nimport { SkyThemeModule } from '@skyux/theme';\n\nimport { SkyAlertComponent } from './alert.component';\n\n@NgModule({\n  declarations: [SkyAlertComponent],\n  imports: [\n    CommonModule,\n    SkyI18nModule,\n    SkyIconModule,\n    SkyIndicatorsResourcesModule,\n    SkyThemeModule,\n  ],\n  exports: [SkyAlertComponent],\n})\nexport class SkyAlertModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyAlertComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIconModule"
                        },
                        {
                            "name": "SkyIndicatorsResourcesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyAlertComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyChevronModule",
            "id": "module-SkyChevronModule-a09a0ccb38fe5a59697f6b2d70c870971554fc63ca76630da4d335099d7db2fc90e49128fc0626eb9ba50a39a178b711b26e454eb0eb3804285ce6cd1606ae01",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/chevron/chevron.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyI18nModule } from '@skyux/i18n';\n\nimport { SkyThemeModule } from '@skyux/theme';\n\nimport { SkyIndicatorsResourcesModule } from '../shared/sky-indicators-resources.module';\n\nimport { SkyChevronComponent } from './chevron.component';\n\n@NgModule({\n  declarations: [SkyChevronComponent],\n  imports: [\n    CommonModule,\n    SkyI18nModule,\n    SkyIndicatorsResourcesModule,\n    SkyThemeModule,\n  ],\n  exports: [SkyChevronComponent],\n})\nexport class SkyChevronModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyChevronComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIndicatorsResourcesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyChevronComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyHelpInlineModule",
            "id": "module-SkyHelpInlineModule-d83de9412436ebaa3d819e745e8f23bb4d8cd1c8eaf3d2bf48a36025203482fa0f266a28abacf97b6df382862b0bc8a9c59f434aa26cd809577120b08fe5e3b8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/help-inline/help-inline.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyI18nModule } from '@skyux/i18n';\n\nimport { SkyThemeModule } from '@skyux/theme';\n\nimport { SkyIconModule } from '../icon/icon.module';\n\nimport { SkyIndicatorsResourcesModule } from '../shared/sky-indicators-resources.module';\n\nimport { SkyHelpInlineComponent } from './help-inline.component';\n\n@NgModule({\n  declarations: [SkyHelpInlineComponent],\n  imports: [\n    CommonModule,\n    SkyI18nModule,\n    SkyIconModule,\n    SkyIndicatorsResourcesModule,\n    SkyThemeModule,\n  ],\n  exports: [SkyHelpInlineComponent],\n})\nexport class SkyHelpInlineModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyHelpInlineComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIconModule"
                        },
                        {
                            "name": "SkyIndicatorsResourcesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyHelpInlineComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyIconModule",
            "id": "module-SkyIconModule-045f19c22a360b87c5614f928683690cc92935d173bb2101cee899c01cd402b9ca2ad9de396da50f08216f0543477698cc61d67f739f4b48875685b9a269ce31",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/icon/icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyIconComponent } from './icon.component';\n\nimport { SkyIconStackComponent } from './icon-stack.component';\n\nimport { SkyIconClassListPipe } from './icon-class-list.pipe';\n\nimport { SkyThemeIconManifestModule } from '@skyux/theme';\n\n@NgModule({\n  declarations: [SkyIconClassListPipe, SkyIconComponent, SkyIconStackComponent],\n  imports: [CommonModule, SkyThemeIconManifestModule],\n  exports: [SkyIconComponent, SkyIconStackComponent],\n})\nexport class SkyIconModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyIconClassListPipe"
                        },
                        {
                            "name": "SkyIconComponent"
                        },
                        {
                            "name": "SkyIconStackComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyIconComponent"
                        },
                        {
                            "name": "SkyIconStackComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyIndicatorsResourcesModule",
            "id": "module-SkyIndicatorsResourcesModule-0971090ec1ec96ea64050feca2892c6f7b84470ccb02c9d6cbefe7c12f0ce3b03accaeefb0e30c133bdb09d1431555d8e5361ce96cc897780caa930f6d77554f",
            "description": "<p>Import into any component library module that needs to use resource strings.</p>\n",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/shared/sky-indicators-resources.module.ts",
            "methods": [],
            "sourceCode": "/**\n * NOTICE: DO NOT MODIFY THIS FILE!\n * The contents of this file were automatically generated by\n * the 'ng generate @skyux/i18n:lib-resources-module modules/shared/sky-indicators' schematic.\n * To update this file, simply rerun the command.\n */\n\nimport { NgModule } from '@angular/core';\nimport {\n  getLibStringForLocale,\n  SkyAppLocaleInfo,\n  SkyI18nModule,\n  SkyLibResources,\n  SkyLibResourcesProvider,\n  SKY_LIB_RESOURCES_PROVIDERS,\n} from '@skyux/i18n';\n\nconst RESOURCES: { [locale: string]: SkyLibResources } = {\n  'EN-US': {\n    skyux_alert_close: { message: 'Close the alert' },\n    skyux_chevron_collapse: { message: 'Collapse' },\n    skyux_chevron_expand: { message: 'Expand' },\n    skyux_help_inline_button_title: { message: 'Show help content' },\n    skyux_status_indicator_sr_completed: { message: 'Completed:' },\n    skyux_status_indicator_sr_error: { message: 'Error:' },\n    skyux_status_indicator_sr_important_info: {\n      message: 'Important information:',\n    },\n    skyux_status_indicator_sr_warning: { message: 'Warning:' },\n    skyux_tokens_dismiss_button_title: { message: 'Remove item' },\n    skyux_wait_aria_alt_text: { message: 'Loading.' },\n    skyux_wait_blocking_aria_alt_text: { message: 'Loading. Please wait.' },\n    skyux_wait_page_aria_alt_text: { message: 'Page loading.' },\n    skyux_wait_page_blocking_aria_alt_text: {\n      message: 'Page loading. Please wait.',\n    },\n  },\n};\n\nexport class SkyIndicatorsResourcesProvider implements SkyLibResourcesProvider {\n  public getString(localeInfo: SkyAppLocaleInfo, name: string): string {\n    return getLibStringForLocale(RESOURCES, localeInfo.locale, name);\n  }\n}\n\n/**\n * Import into any component library module that needs to use resource strings.\n */\n@NgModule({\n  exports: [SkyI18nModule],\n  providers: [\n    {\n      provide: SKY_LIB_RESOURCES_PROVIDERS,\n      useClass: SkyIndicatorsResourcesProvider,\n      multi: true,\n    },\n  ],\n})\nexport class SkyIndicatorsResourcesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyInlineHlpeFixturesModule",
            "id": "module-SkyInlineHlpeFixturesModule-635554cba3aea85a73ebea257442efafca176085c8b055abfab72f9dd809d76e09c110c0671f560e75df68ccc2c0c46dfbdb48a824f4a65ae319296b168f49f7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/help-inline/fixtures/help-inline-fixtures.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyHelpInlineModule } from '../help-inline.module';\n\nimport { HelpInlineTestComponent } from './help-inline.component.fixture';\n\n@NgModule({\n  declarations: [HelpInlineTestComponent],\n  imports: [CommonModule, SkyHelpInlineModule],\n  exports: [HelpInlineTestComponent],\n})\nexport class SkyInlineHlpeFixturesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HelpInlineTestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyHelpInlineModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HelpInlineTestComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyKeyInfoFixturesModule",
            "id": "module-SkyKeyInfoFixturesModule-8a667fc1afd0143cff1095c7bae09f5bc53157e301be984111831e26802ba641e7af42b3c571045163a3036affffe3d360de29d9838c9f7f98cd235b50d930f9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/key-info/fixtures/key-info-fixtures.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyKeyInfoModule } from '../key-info.module';\n\nimport { KeyInfoTestComponent } from './key-info.component.fixture';\n\n@NgModule({\n  declarations: [KeyInfoTestComponent],\n  imports: [CommonModule, SkyKeyInfoModule],\n  exports: [KeyInfoTestComponent],\n})\nexport class SkyKeyInfoFixturesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "KeyInfoTestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyKeyInfoModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "KeyInfoTestComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyKeyInfoModule",
            "id": "module-SkyKeyInfoModule-6d0e378b3ef966d4c0d71ffc68aeb28377bbab5067ef738d8c534d734cb4b3264d6d01fd6812ccf6af64bf4136452d601d25225e7fcda1e45b7d688eda67cb63",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/key-info/key-info.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyKeyInfoLabelComponent } from './key-info-label.component';\n\nimport { SkyKeyInfoValueComponent } from './key-info-value.component';\n\nimport { SkyKeyInfoComponent } from './key-info.component';\n\n@NgModule({\n  declarations: [\n    SkyKeyInfoComponent,\n    SkyKeyInfoLabelComponent,\n    SkyKeyInfoValueComponent,\n  ],\n  imports: [CommonModule],\n  exports: [\n    SkyKeyInfoComponent,\n    SkyKeyInfoLabelComponent,\n    SkyKeyInfoValueComponent,\n  ],\n})\nexport class SkyKeyInfoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyKeyInfoComponent"
                        },
                        {
                            "name": "SkyKeyInfoLabelComponent"
                        },
                        {
                            "name": "SkyKeyInfoValueComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyKeyInfoComponent"
                        },
                        {
                            "name": "SkyKeyInfoLabelComponent"
                        },
                        {
                            "name": "SkyKeyInfoValueComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyLabelFixturesModule",
            "id": "module-SkyLabelFixturesModule-12c453d717d149a29c8aaef324e612c2613b59907a7d355e3ae1fa460dae8129b25c733325488bc2cf327505bb97190b69d0f9a11f5285331e4ef914c7a552fb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/label/fixtures/label-fixtures.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyLabelModule } from '../label.module';\n\nimport { LabelTestComponent } from './label.component.fixture';\n\n@NgModule({\n  declarations: [LabelTestComponent],\n  imports: [CommonModule, SkyLabelModule],\n  exports: [LabelTestComponent],\n})\nexport class SkyLabelFixturesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LabelTestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyLabelModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "LabelTestComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyLabelModule",
            "id": "module-SkyLabelModule-c35e5394240710f5e862da9747c0182c6762b559ac035511f8102a341ebde3acea8e50822d2c36820ee05f2659174a0b672ffb64c31d66ee95227966c87afe48",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/label/label.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyIconModule } from '../icon/icon.module';\n\nimport { SkyLabelComponent } from './label.component';\n\n@NgModule({\n  declarations: [SkyLabelComponent],\n  imports: [CommonModule, SkyIconModule],\n  exports: [SkyLabelComponent],\n})\nexport class SkyLabelModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyLabelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIconModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyLabelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyStatusIndicatorModule",
            "id": "module-SkyStatusIndicatorModule-159e028274269def1a0f5ea2e1196b1f79ca905a4dabd8c05d49bf1a91d52106132696468f8cc9c96eae8c14696c74416b4efaae58036b63221f5135ba6c4f85",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/status-indicator/status-indicator.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyI18nModule } from '@skyux/i18n';\n\nimport { SkyIndicatorsResourcesModule } from '../shared/sky-indicators-resources.module';\n\nimport { SkyIconModule } from '../icon/icon.module';\n\nimport { SkyStatusIndicatorComponent } from './status-indicator.component';\n\n@NgModule({\n  declarations: [SkyStatusIndicatorComponent],\n  imports: [\n    CommonModule,\n    SkyI18nModule,\n    SkyIconModule,\n    SkyIndicatorsResourcesModule,\n  ],\n  exports: [SkyStatusIndicatorComponent],\n})\nexport class SkyStatusIndicatorModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyStatusIndicatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIconModule"
                        },
                        {
                            "name": "SkyIndicatorsResourcesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyStatusIndicatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyTextHighlightModule",
            "id": "module-SkyTextHighlightModule-6d4fc9f52767d21cf4cecad6d2e0b785cda759939965e8a2865d7b6e9c000540f67637b4e6d9620b17e998a9b006f1287a12aa1ef3520f6a49871912bf468335",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/text-highlight/text-highlight.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { MutationObserverService } from '@skyux/core';\n\nimport { SkyTextHighlightDirective } from './text-highlight.directive';\n\n@NgModule({\n  declarations: [SkyTextHighlightDirective],\n  exports: [SkyTextHighlightDirective],\n  providers: [MutationObserverService],\n})\nexport class SkyTextHighlightModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyTextHighlightDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyTextHighlightDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyTokensFixturesModule",
            "id": "module-SkyTokensFixturesModule-53f4eead955dcf6410724edecbdf207ccb02019f819c9612040aea754daed0a4086cef7e26499348e552b611ea7eff977c339f786dbd97954a50034089b4c6e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/tokens/fixtures/tokens-fixtures.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { SkyTokensModule } from '../tokens.module';\n\nimport { SkyTokensTestComponent } from './tokens.component.fixture';\n\n@NgModule({\n  declarations: [SkyTokensTestComponent],\n  imports: [CommonModule, NoopAnimationsModule, SkyTokensModule],\n  exports: [SkyTokensTestComponent],\n})\nexport class SkyTokensFixturesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyTokensTestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyTokensModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyTokensTestComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyTokensModule",
            "id": "module-SkyTokensModule-cf54ed2eb5ca79904c43e98db5f840de9c3ec66661c231194a3ac8e7a14556fe045d8f09e9b981772fb1219b2be8d146e3fb21e45bf7fd0605eb14252ae0c388",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/tokens/tokens.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyI18nModule } from '@skyux/i18n';\n\nimport { SkyTokenComponent } from './token.component';\n\nimport { SkyTokensComponent } from './tokens.component';\n\nimport { SkyIconModule } from '../icon/icon.module';\n\nimport { SkyIndicatorsResourcesModule } from '../shared/sky-indicators-resources.module';\n\n@NgModule({\n  declarations: [SkyTokenComponent, SkyTokensComponent],\n  imports: [\n    CommonModule,\n    SkyI18nModule,\n    SkyIconModule,\n    SkyIndicatorsResourcesModule,\n  ],\n  exports: [SkyTokenComponent, SkyTokensComponent],\n})\nexport class SkyTokensModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyTokenComponent"
                        },
                        {
                            "name": "SkyTokensComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIconModule"
                        },
                        {
                            "name": "SkyIndicatorsResourcesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyTokenComponent"
                        },
                        {
                            "name": "SkyTokensComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyWaitFixturesModule",
            "id": "module-SkyWaitFixturesModule-5a1b2f6a9e4dd89bfbe321a9acfa24074e03496dc23ac60bb43041a695e18ac1469a966a265274d1feb000ae6c18f3c28dd27cb382595a6272568a3c2e31aac8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/wait/fixtures/wait-fixtures.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyAppWindowRef } from '@skyux/core';\n\nimport { SkyWaitModule } from '../wait.module';\n\nimport { SkyWaitTestComponent } from './wait.component.fixture';\n\n@NgModule({\n  declarations: [SkyWaitTestComponent],\n  imports: [CommonModule, SkyWaitModule],\n  providers: [SkyAppWindowRef],\n  entryComponents: [SkyWaitTestComponent],\n})\nexport class SkyWaitFixturesModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyWaitTestComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyWaitModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SkyWaitModule",
            "id": "module-SkyWaitModule-025ff37c6de5a6f635de09ab19f9b489a79ab7ef53720c35e522dd427505fe65ef7ad882b163606825f5b2e8f5a696983f4e1dd33098e15c111f7ccd22b5eefc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/src/modules/wait/wait.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyI18nModule } from '@skyux/i18n';\n\nimport { SkyIndicatorsResourcesModule } from '../shared/sky-indicators-resources.module';\n\nimport { SkyWaitComponent } from './wait.component';\n\nimport { SkyWaitPageComponent } from './wait-page.component';\n\n@NgModule({\n  declarations: [SkyWaitComponent, SkyWaitPageComponent],\n  imports: [CommonModule, SkyI18nModule, SkyIndicatorsResourcesModule],\n  exports: [SkyWaitComponent],\n  entryComponents: [SkyWaitPageComponent],\n})\nexport class SkyWaitModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SkyWaitComponent"
                        },
                        {
                            "name": "SkyWaitPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyIndicatorsResourcesModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SkyWaitComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StatusIndicatorDemoModule",
            "id": "module-StatusIndicatorDemoModule-cd3f40c2028d937929e80efb808b1bdec6bf0896c23f6ded31c32bcef3a4b5c9c81529dac84bac2d54a843253d85d9b0ecda32a179dad97627c7bb602bd583d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/status-indicator/basic/status-indicator-demo.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { SkyStatusIndicatorModule } from '@skyux/indicators';\n\nimport { StatusIndicatorDemoComponent } from './status-indicator-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyStatusIndicatorModule],\n  declarations: [StatusIndicatorDemoComponent],\n  exports: [StatusIndicatorDemoComponent],\n})\nexport class StatusIndicatorDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "StatusIndicatorDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyStatusIndicatorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "StatusIndicatorDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TextHighlightDemoModule",
            "id": "module-TextHighlightDemoModule-b69d04e7b892dfc1fcbe5b9cc968d76b30da8357ea49eda6ff4d4a121c8ff5b1ce30c5e2f4a76b73fa60f85cd22a4d04881d634184787301e9af623fed1b1644",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/text-highlight/basic/text-highlight-demo.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\n\nimport { NgModule } from '@angular/core';\n\nimport { FormsModule } from '@angular/forms';\n\nimport { SkyIdModule } from '@skyux/core';\n\nimport { SkyCheckboxModule } from '@skyux/forms';\n\nimport { SkyTextHighlightModule } from '@skyux/indicators';\n\nimport { TextHighlightDemoComponent } from './text-highlight-demo.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    SkyCheckboxModule,\n    SkyIdModule,\n    SkyTextHighlightModule,\n  ],\n  exports: [TextHighlightDemoComponent],\n  declarations: [TextHighlightDemoComponent],\n})\nexport class TextHighlightDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TextHighlightDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyTextHighlightModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TextHighlightDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TokensDemoModule",
            "id": "module-TokensDemoModule-34dc2e2069bde287eff2e0077dbf9d86374ebbd6fa4542a06772e21717c0c962b968c63c1da3fa157839c088ae2fd47decaa18355b8fb580f034a74617e96a28",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/tokens/basic/tokens-demo.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\n\nimport { NgModule } from '@angular/core';\n\nimport { SkyTokensModule } from '@skyux/indicators';\n\nimport { TokensDemoComponent } from './tokens-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyTokensModule],\n  exports: [TokensDemoComponent],\n  declarations: [TokensDemoComponent],\n})\nexport class TokensDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TokensDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyTokensModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TokensDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TokensDemoModule",
            "id": "module-TokensDemoModule-34dc2e2069bde287eff2e0077dbf9d86374ebbd6fa4542a06772e21717c0c962b968c63c1da3fa157839c088ae2fd47decaa18355b8fb580f034a74617e96a28-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/tokens/custom/tokens-demo.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\n\nimport { NgModule } from '@angular/core';\n\nimport { SkyTokensModule } from '@skyux/indicators';\n\nimport { TokensDemoComponent } from './tokens-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyTokensModule],\n  exports: [TokensDemoComponent],\n  declarations: [TokensDemoComponent],\n})\nexport class TokensDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TokensDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyTokensModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "VisualModule",
            "id": "module-VisualModule-6d019b687c03359bfd6f15bde5f2ec4ffde32baaa651de7e3d63f87bea6ef46af76c18a79452392d26a0c4c7ba4f7c887d916135c6027e3eeb0f81c1e470d1ff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators-showcase/src/app/visual/visual.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { SkyE2eThemeSelectorModule } from '@skyux/e2e-client';\n\nimport {\n  SkyAlertModule,\n  SkyChevronModule,\n  SkyHelpInlineModule,\n  SkyIconModule,\n  SkyKeyInfoModule,\n  SkyLabelModule,\n  SkyStatusIndicatorModule,\n  SkyTextHighlightModule,\n  SkyTokensModule,\n  SkyWaitModule,\n} from 'projects/indicators/src/public-api';\n\nimport { VisualComponent } from './visual.component';\nimport { AlertVisualComponent } from './alert/alert-visual.component';\nimport { RouterModule } from '@angular/router';\nimport { SkyChevronDemoComponent } from './chevron/chevron-demo.component';\nimport { SkyHelpInlineDemoComponent } from './help-inline/help-inline-demo.component';\nimport { SkyIconStackDemoComponent } from './icon-stack/icon-stack-demo.component';\nimport { SkyIconDemoComponent } from './icon/icon-demo.component';\nimport { KeyInfoVisualComponent } from './key-info/key-info-visual.component';\nimport { SkyLabelDemoComponent } from './label/label-demo.component';\nimport { StatusIndicatorVisualComponent } from './status-indicator/status-indicator-visual.component';\nimport { SkyTextHighlightDemoComponent } from './text-highlight/text-highlight-demo.component';\nimport { SkyTokensDemoComponent } from './tokens/tokens-demo.component';\nimport { SkyWaitDemoComponent } from './wait/wait-demo.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AlertVisualComponent,\n    SkyChevronDemoComponent,\n    SkyHelpInlineDemoComponent,\n    SkyIconDemoComponent,\n    SkyIconStackDemoComponent,\n    KeyInfoVisualComponent,\n    VisualComponent,\n    SkyLabelDemoComponent,\n    StatusIndicatorVisualComponent,\n    SkyTextHighlightDemoComponent,\n    SkyTokensDemoComponent,\n    SkyWaitDemoComponent,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    SkyAlertModule,\n    SkyChevronModule,\n    SkyE2eThemeSelectorModule,\n    SkyHelpInlineModule,\n    SkyIconModule,\n    SkyKeyInfoModule,\n    SkyLabelModule,\n    SkyStatusIndicatorModule,\n    SkyTextHighlightModule,\n    SkyTokensModule,\n    SkyWaitModule,\n  ],\n})\nexport class VisualModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlertVisualComponent"
                        },
                        {
                            "name": "KeyInfoVisualComponent"
                        },
                        {
                            "name": "SkyChevronDemoComponent"
                        },
                        {
                            "name": "SkyHelpInlineDemoComponent"
                        },
                        {
                            "name": "SkyIconDemoComponent"
                        },
                        {
                            "name": "SkyIconStackDemoComponent"
                        },
                        {
                            "name": "SkyLabelDemoComponent"
                        },
                        {
                            "name": "SkyTextHighlightDemoComponent"
                        },
                        {
                            "name": "SkyTokensDemoComponent"
                        },
                        {
                            "name": "SkyWaitDemoComponent"
                        },
                        {
                            "name": "StatusIndicatorVisualComponent"
                        },
                        {
                            "name": "VisualComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyAlertModule"
                        },
                        {
                            "name": "SkyChevronModule"
                        },
                        {
                            "name": "SkyHelpInlineModule"
                        },
                        {
                            "name": "SkyIconModule"
                        },
                        {
                            "name": "SkyKeyInfoModule"
                        },
                        {
                            "name": "SkyLabelModule"
                        },
                        {
                            "name": "SkyStatusIndicatorModule"
                        },
                        {
                            "name": "SkyTextHighlightModule"
                        },
                        {
                            "name": "SkyTokensModule"
                        },
                        {
                            "name": "SkyWaitModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WaitDemoModule",
            "id": "module-WaitDemoModule-092ef138fcdd3ac9b64c8e479344e11c8dbe78023b5be92fe3dff5aba139401ed27960c8b051956cad0414265d85d75bba0ff5481548dc76fb455f65d4ebb430",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/wait/element/wait-demo.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\n\nimport { NgModule } from '@angular/core';\n\nimport { SkyWaitModule } from '@skyux/indicators';\n\nimport { WaitDemoComponent } from './wait-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyWaitModule],\n  exports: [WaitDemoComponent],\n  declarations: [WaitDemoComponent],\n})\nexport class WaitDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WaitDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyWaitModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "WaitDemoComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "WaitDemoModule",
            "id": "module-WaitDemoModule-092ef138fcdd3ac9b64c8e479344e11c8dbe78023b5be92fe3dff5aba139401ed27960c8b051956cad0414265d85d75bba0ff5481548dc76fb455f65d4ebb430-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/indicators/documentation/code-examples/wait/page/wait-demo.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\n\nimport { NgModule } from '@angular/core';\n\nimport { SkyWaitModule } from '@skyux/indicators';\n\nimport { WaitDemoComponent } from './wait-demo.component';\n\n@NgModule({\n  imports: [CommonModule, SkyWaitModule],\n  exports: [WaitDemoComponent],\n  declarations: [WaitDemoComponent],\n})\nexport class WaitDemoModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "WaitDemoComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SkyWaitModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ALERT_TYPE_DEFAULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators/src/modules/alert/alert.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'warning'"
            },
            {
                "name": "className",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators/src/modules/text-highlight/text-highlight.directive.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'sky-highlight-mark'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators-showcase/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators-showcase/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n}"
            },
            {
                "name": "INDICATOR_TYPE_DEFAULT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators/src/modules/status-indicator/status-indicator.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "SkyIndicatorIconType",
                "defaultValue": "'warning'"
            },
            {
                "name": "info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "nextId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators/src/modules/wait/wait.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "RESOURCES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/indicators/src/modules/shared/sky-indicators-resources.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  'EN-US': {\n    skyux_alert_close: { message: 'Close the alert' },\n    skyux_chevron_collapse: { message: 'Collapse' },\n    skyux_chevron_expand: { message: 'Expand' },\n    skyux_help_inline_button_title: { message: 'Show help content' },\n    skyux_status_indicator_sr_completed: { message: 'Completed:' },\n    skyux_status_indicator_sr_error: { message: 'Error:' },\n    skyux_status_indicator_sr_important_info: {\n      message: 'Important information:',\n    },\n    skyux_status_indicator_sr_warning: { message: 'Warning:' },\n    skyux_tokens_dismiss_button_title: { message: 'Remove item' },\n    skyux_wait_aria_alt_text: { message: 'Loading.' },\n    skyux_wait_blocking_aria_alt_text: { message: 'Loading. Please wait.' },\n    skyux_wait_page_aria_alt_text: { message: 'Page loading.' },\n    skyux_wait_page_blocking_aria_alt_text: {\n      message: 'Page loading. Please wait.',\n    },\n  },\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<SkyAlertComponent>",
                "defaultValue": "(args: SkyAlertComponent) => ({\n  props: args,\n  template: '<sky-alert>This is an alert message.</sky-alert>',\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "SkyIconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"fa\" | \"skyux\"",
                "file": "projects/indicators/src/modules/icon/types/icon-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SkyIconVariantType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"line\" | \"solid\"",
                "file": "projects/indicators/src/modules/icon/types/icon-variant-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SkyIndicatorDescriptionType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"completed\" | \"custom\" | \"error\" | \"important-info\" | \"none\" | \"warning\"",
                "file": "projects/indicators/src/modules/shared/indicator-description-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SkyIndicatorIconType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"danger\" | \"info\" | \"success\" | \"warning\"",
                "file": "projects/indicators/src/modules/shared/indicator-icon-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "SkyLabelType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"danger\" | \"info\" | \"success\" | \"warning\"",
                "file": "projects/indicators/src/modules/label/label-type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "SkyIconVariant",
                "childs": [
                    {
                        "name": "Line",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "line"
                    },
                    {
                        "name": "Solid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "solid"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": true,
                "deprecationMessage": "Use `SkyIconVariantType` instead.\nIndicates the icon variant to display.",
                "description": "",
                "file": "projects/indicators/src/modules/icon/icon-variant.ts"
            },
            {
                "name": "SkyTokensMessageType",
                "childs": [
                    {
                        "name": "FocusLastToken",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "FocusActiveToken",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "FocusPreviousToken",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "FocusNextToken",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    },
                    {
                        "name": "RemoveActiveToken",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "4"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/indicators/src/modules/tokens/types/tokens-message-type.ts"
            }
        ],
        "groupedVariables": {
            "projects/indicators/src/modules/alert/alert.component.ts": [
                {
                    "name": "ALERT_TYPE_DEFAULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators/src/modules/alert/alert.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'warning'"
                }
            ],
            "projects/indicators/src/modules/text-highlight/text-highlight.directive.ts": [
                {
                    "name": "className",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators/src/modules/text-highlight/text-highlight.directive.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'sky-highlight-mark'"
                }
            ],
            "projects/indicators/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/indicators-showcase/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators-showcase/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n}"
                }
            ],
            "projects/indicators-showcase/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators-showcase/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n}"
                }
            ],
            "projects/indicators/src/modules/status-indicator/status-indicator.component.ts": [
                {
                    "name": "INDICATOR_TYPE_DEFAULT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators/src/modules/status-indicator/status-indicator.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SkyIndicatorIconType",
                    "defaultValue": "'warning'"
                }
            ],
            "stories/alert.stories.ts": [
                {
                    "name": "info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<SkyAlertComponent>",
                    "defaultValue": "(args: SkyAlertComponent) => ({\n  props: args,\n  template: '<sky-alert>This is an alert message.</sky-alert>',\n})"
                }
            ],
            "projects/indicators/src/modules/wait/wait.component.ts": [
                {
                    "name": "nextId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators/src/modules/wait/wait.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/indicators/src/modules/shared/sky-indicators-resources.module.ts": [
                {
                    "name": "RESOURCES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/indicators/src/modules/shared/sky-indicators-resources.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  'EN-US': {\n    skyux_alert_close: { message: 'Close the alert' },\n    skyux_chevron_collapse: { message: 'Collapse' },\n    skyux_chevron_expand: { message: 'Expand' },\n    skyux_help_inline_button_title: { message: 'Show help content' },\n    skyux_status_indicator_sr_completed: { message: 'Completed:' },\n    skyux_status_indicator_sr_error: { message: 'Error:' },\n    skyux_status_indicator_sr_important_info: {\n      message: 'Important information:',\n    },\n    skyux_status_indicator_sr_warning: { message: 'Warning:' },\n    skyux_tokens_dismiss_button_title: { message: 'Remove item' },\n    skyux_wait_aria_alt_text: { message: 'Loading.' },\n    skyux_wait_blocking_aria_alt_text: { message: 'Loading. Please wait.' },\n    skyux_wait_page_aria_alt_text: { message: 'Page loading.' },\n    skyux_wait_page_blocking_aria_alt_text: {\n      message: 'Page loading. Please wait.',\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/indicators/src/modules/icon/icon-variant.ts": [
                {
                    "name": "SkyIconVariant",
                    "childs": [
                        {
                            "name": "Line",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "line"
                        },
                        {
                            "name": "Solid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "solid"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": true,
                    "deprecationMessage": "Use `SkyIconVariantType` instead.\nIndicates the icon variant to display.",
                    "description": "",
                    "file": "projects/indicators/src/modules/icon/icon-variant.ts"
                }
            ],
            "projects/indicators/src/modules/tokens/types/tokens-message-type.ts": [
                {
                    "name": "SkyTokensMessageType",
                    "childs": [
                        {
                            "name": "FocusLastToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "FocusActiveToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "FocusPreviousToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "FocusNextToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        },
                        {
                            "name": "RemoveActiveToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "4"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/indicators/src/modules/tokens/types/tokens-message-type.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/indicators/src/modules/icon/types/icon-type.ts": [
                {
                    "name": "SkyIconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"fa\" | \"skyux\"",
                    "file": "projects/indicators/src/modules/icon/types/icon-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/indicators/src/modules/icon/types/icon-variant-type.ts": [
                {
                    "name": "SkyIconVariantType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"line\" | \"solid\"",
                    "file": "projects/indicators/src/modules/icon/types/icon-variant-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/indicators/src/modules/shared/indicator-description-type.ts": [
                {
                    "name": "SkyIndicatorDescriptionType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"completed\" | \"custom\" | \"error\" | \"important-info\" | \"none\" | \"warning\"",
                    "file": "projects/indicators/src/modules/shared/indicator-description-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/indicators/src/modules/shared/indicator-icon-type.ts": [
                {
                    "name": "SkyIndicatorIconType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"danger\" | \"info\" | \"success\" | \"warning\"",
                    "file": "projects/indicators/src/modules/shared/indicator-icon-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/indicators/src/modules/label/label-type.ts": [
                {
                    "name": "SkyLabelType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"danger\" | \"info\" | \"success\" | \"warning\"",
                    "file": "projects/indicators/src/modules/label/label-type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/indicators-showcase/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "VisualComponent"
                    },
                    {
                        "path": "visual/alert",
                        "component": "AlertVisualComponent"
                    },
                    {
                        "path": "visual/chevron",
                        "component": "SkyChevronDemoComponent"
                    },
                    {
                        "path": "visual/help-inline",
                        "component": "SkyHelpInlineDemoComponent"
                    },
                    {
                        "path": "visual/icon",
                        "component": "SkyIconDemoComponent"
                    },
                    {
                        "path": "visual/icon-stack",
                        "component": "SkyIconStackDemoComponent"
                    },
                    {
                        "path": "visual/key-info",
                        "component": "KeyInfoVisualComponent"
                    },
                    {
                        "path": "visual/label",
                        "component": "SkyLabelDemoComponent"
                    },
                    {
                        "path": "visual/status-indicator",
                        "component": "StatusIndicatorVisualComponent"
                    },
                    {
                        "path": "visual/text-highlight",
                        "component": "SkyTextHighlightDemoComponent"
                    },
                    {
                        "path": "visual/tokens",
                        "component": "SkyTokensDemoComponent"
                    },
                    {
                        "path": "visual/wait",
                        "component": "SkyWaitDemoComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 12,
        "status": "low",
        "files": [
            {
                "filePath": "projects/indicators-showcase/e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/alert/alert-visual.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertVisualComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/chevron/chevron-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyChevronDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/help-inline/help-inline-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyHelpInlineDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/icon-stack/icon-stack-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyIconStackDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/icon/icon-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyIconDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/key-info/key-info-visual.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyInfoVisualComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/label/label-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyLabelDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/status-indicator/status-indicator-visual.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusIndicatorVisualComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/text-highlight/text-highlight-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyTextHighlightDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/tokens/tokens-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyTokensDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/visual.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VisualComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/app/visual/wait/wait-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyWaitDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators-showcase/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/alert/basic/alert-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/help-inline/basic/help-inline-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelpInlineDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/icon/icon-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/key-info/basic/key-info-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyInfoDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/label/basic/label-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/status-indicator/basic/status-indicator-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusIndicatorDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/text-highlight/basic/text-highlight-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextHighlightDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/tokens/basic/tokens-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TokensDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/tokens/custom/tokens-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TokensDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/wait/element/wait-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WaitDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/documentation/code-examples/wait/page/wait-demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WaitDemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/alert/alert.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyAlertComponent",
                "coveragePercent": 36,
                "coverageCount": "4/11",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/alert/alert.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALERT_TYPE_DEFAULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/alert/fixtures/alert.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/chevron/chevron.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyChevronComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/help-inline/fixtures/help-inline.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "HelpInlineTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/help-inline/help-inline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyHelpInlineComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/icon/fixtures/icon-stack.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconStackTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/icon/fixtures/icon.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/icon/icon-class-list.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SkyIconClassListPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/icon/icon-resolver.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SkyIconResolverService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/icon/icon-stack-item.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SkyIconStackItem",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "projects/indicators/src/modules/icon/icon-stack.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyIconStackComponent",
                "coveragePercent": 75,
                "coverageCount": "3/4",
                "status": "good"
            },
            {
                "filePath": "projects/indicators/src/modules/icon/icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyIconComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/indicators/src/modules/key-info/fixtures/key-info.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeyInfoTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/key-info/key-info-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyKeyInfoLabelComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/indicators/src/modules/key-info/key-info-value.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyKeyInfoValueComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "projects/indicators/src/modules/key-info/key-info.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyKeyInfoComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/label/fixtures/label.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/label/label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyLabelComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/shared/indicator-icon-utility.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SkyIndicatorIconUtility",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/shared/indicator-icon.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SkyIndicatorIcon",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/shared/sky-indicators-resources.module.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SkyIndicatorsResourcesProvider",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/shared/sky-indicators-resources.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RESOURCES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/status-indicator/fixtures/status-indicator.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "StatusIndicatorTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/status-indicator/status-indicator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyStatusIndicatorComponent",
                "coveragePercent": 21,
                "coverageCount": "3/14",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/status-indicator/status-indicator.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INDICATOR_TYPE_DEFAULT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/text-highlight/fixtures/text-highlight.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyTextHighlightTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/text-highlight/text-highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SkyTextHighlightDirective",
                "coveragePercent": 12,
                "coverageCount": "2/16",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/text-highlight/text-highlight.directive.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "className",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/tokens/fixtures/tokens.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyTokensTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/tokens/token.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyTokenComponent",
                "coveragePercent": 31,
                "coverageCount": "6/19",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/tokens/tokens.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyTokensComponent",
                "coveragePercent": 33,
                "coverageCount": "12/36",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/tokens/types/token-selected-event-args.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SkyTokenSelectedEventArgs",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/tokens/types/token.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SkyToken",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/tokens/types/tokens-message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SkyTokensMessage",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/wait/fixtures/wait.component.fixture.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyWaitTestComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/wait/wait-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SkyWaitAdapterService",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/wait/wait-page-adapter.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SkyWaitPageAdapterService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/wait/wait-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyWaitPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/wait/wait.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkyWaitComponent",
                "coveragePercent": 33,
                "coverageCount": "4/12",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/modules/wait/wait.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nextId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/modules/wait/wait.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SkyWaitService",
                "coveragePercent": 41,
                "coverageCount": "7/17",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/testing/src/alert-fixture.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SkyAlertFixture",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "projects/indicators/testing/src/label-fixture.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SkyLabelFixture",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/indicators/testing/src/wait-fixture.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SkyWaitFixture",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}